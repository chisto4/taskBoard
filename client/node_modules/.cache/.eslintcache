[{"/Users/chistofor/Documents/project/taskBoard/client/src/index.tsx":"1","/Users/chistofor/Documents/project/taskBoard/client/src/store/index.ts":"2","/Users/chistofor/Documents/project/taskBoard/client/src/App.tsx":"3","/Users/chistofor/Documents/project/taskBoard/client/src/store/reducers.ts":"4","/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/userThunk.ts":"5","/Users/chistofor/Documents/project/taskBoard/client/src/api/routePage/AppRouter.tsx":"6","/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/header/header.tsx":"7","/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/modalWindows/userRegistrationForm/UserRegistrationForm.tsx":"8","/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/modalWindows/loginForm/loginForm.tsx":"9","/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/userReducer.ts":"10","/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/actionUser.ts":"11","/Users/chistofor/Documents/project/taskBoard/client/src/api/const/const.js":"12","/Users/chistofor/Documents/project/taskBoard/client/src/api/userApi/userApi.ts":"13","/Users/chistofor/Documents/project/taskBoard/client/src/api/routePage/routes.tsx":"14","/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/constansUser.ts":"15","/Users/chistofor/Documents/project/taskBoard/client/src/api/userApi/index.ts":"16","/Users/chistofor/Documents/project/taskBoard/client/src/pages/workSpace/WorkSpace.js":"17","/Users/chistofor/Documents/project/taskBoard/client/src/pages/userPage/userPage.tsx":"18","/Users/chistofor/Documents/project/taskBoard/client/src/pages/homePage/homePage.tsx":"19","/Users/chistofor/Documents/project/taskBoard/client/src/pages/login/loginPage.tsx":"20","/Users/chistofor/Documents/project/taskBoard/client/src/pages/registration/registartionWindow.tsx":"21","/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/main/Main.tsx":"22"},{"size":241,"mtime":1629877235719,"results":"23","hashOfConfig":"24"},{"size":457,"mtime":1629877235799,"results":"25","hashOfConfig":"24"},{"size":1716,"mtime":1629998006617,"results":"26","hashOfConfig":"24"},{"size":503,"mtime":1629877235801,"results":"27","hashOfConfig":"24"},{"size":1994,"mtime":1629998069606,"results":"28","hashOfConfig":"24"},{"size":810,"mtime":1629959531256,"results":"29","hashOfConfig":"24"},{"size":2099,"mtime":1629994575017,"results":"30","hashOfConfig":"24"},{"size":2721,"mtime":1629959531319,"results":"31","hashOfConfig":"24"},{"size":923,"mtime":1629959531317,"results":"32","hashOfConfig":"24"},{"size":1712,"mtime":1629912730276,"results":"33","hashOfConfig":"24"},{"size":1145,"mtime":1629912857054,"results":"34","hashOfConfig":"24"},{"size":359,"mtime":1629877235623,"results":"35","hashOfConfig":"24"},{"size":2288,"mtime":1629997855425,"results":"36","hashOfConfig":"24"},{"size":983,"mtime":1629959531256,"results":"37","hashOfConfig":"24"},{"size":1631,"mtime":1629877267369,"results":"38","hashOfConfig":"24"},{"size":781,"mtime":1629997652269,"results":"39","hashOfConfig":"24"},{"size":3508,"mtime":1629959531326,"results":"40","hashOfConfig":"24"},{"size":7473,"mtime":1629981393004,"results":"41","hashOfConfig":"24"},{"size":595,"mtime":1629959531323,"results":"42","hashOfConfig":"24"},{"size":1779,"mtime":1629959531324,"results":"43","hashOfConfig":"24"},{"size":3075,"mtime":1629959531325,"results":"44","hashOfConfig":"24"},{"size":927,"mtime":1629959531315,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"a3mr1x",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/chistofor/Documents/project/taskBoard/client/src/index.tsx",[],["95","96"],"/Users/chistofor/Documents/project/taskBoard/client/src/store/index.ts",[],"/Users/chistofor/Documents/project/taskBoard/client/src/App.tsx",["97","98"],"/Users/chistofor/Documents/project/taskBoard/client/src/store/reducers.ts",[],"/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/userThunk.ts",["99","100","101"],"/Users/chistofor/Documents/project/taskBoard/client/src/api/routePage/AppRouter.tsx",[],"/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/header/header.tsx",[],"/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/modalWindows/userRegistrationForm/UserRegistrationForm.tsx",[],"/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/modalWindows/loginForm/loginForm.tsx",[],"/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/userReducer.ts",[],"/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/actionUser.ts",[],"/Users/chistofor/Documents/project/taskBoard/client/src/api/const/const.js",[],["102","103"],"/Users/chistofor/Documents/project/taskBoard/client/src/api/userApi/userApi.ts",["104"],"/Users/chistofor/Documents/project/taskBoard/client/src/api/routePage/routes.tsx",[],"/Users/chistofor/Documents/project/taskBoard/client/src/store/userReducer/constansUser.ts",[],"/Users/chistofor/Documents/project/taskBoard/client/src/api/userApi/index.ts",[],"/Users/chistofor/Documents/project/taskBoard/client/src/pages/workSpace/WorkSpace.js",[],"/Users/chistofor/Documents/project/taskBoard/client/src/pages/userPage/userPage.tsx",["105","106","107","108"],"import Main from \"../components/main/Main\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import { FormEvent } from 'react';\nimport React, {useState, useRef, useCallback} from 'react';\n\nimport styles from './userPage.module.scss';\nimport userAvatar from '../../image/user2.jpg';\nimport { useAppSelector } from \"../../store/reducers\";\nimport { IUser } from \"../../types/types\";\nimport { updateUser } from \"../../store/userReducer/userThunk\";\nimport { useDispatch } from \"react-redux\";\nimport { format, compareAsc } from 'date-fns'\nimport axios from '../../api/userApi/index';\n\n// import {deleteUsers} from '../..//api/deleteUser'\n// import {editUsers} from '../..//api/updateUser'\n\n// const userInfo = async (event: { preventDefault: () => void; }) => {\n//   const res = await instance.post('/user',      \n//   {\n//     name: name,\n//     surname: surname,\n//     login: login,\n//     email: email,\n//     password: password,\n//     dob: dob\n// })\n//   event.preventDefault();\n\n//   return (\n//       <div className={styles.userRegistrationSucces}>\n//         User Hes registration\n//         console.log('registracia rabotaet');\n//       </div>\n//   );\n// } \n\nconst UserPage: React.FC = (): JSX.Element => {\n  // const dispatch = useDispatch;\n  // cons user = useSelector((state) => state.user)\n\n  // interface defState {\n\n  // }\n\n\n  const { name: stateName, dob: stateDob, email: stateEmail, login: stateLogin, surname: stateSurName } = useAppSelector((state) => state.user.user)\n  const thrueDateFormat = format(new Date(stateDob), 'MM/dd/yyyy')\n\n  const [userName, setUserName] = useState(stateName);\n  const [userSurName, setUserSurName] = useState(stateSurName);\n  const [userLogin, setUserLogin] = useState(stateLogin);\n  const [userPassword, setUserPassword] = useState('');\n  const [userDob, setUserDob] = useState(stateDob);\n\n  const dispatch = useDispatch();\n\n  const userInfo: React.FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    console.log('event', event);\n\n    const user: IUser = {\n      name: userName,\n      surname: userSurName,\n      login: userLogin,\n      password: userPassword,\n      dob: userDob,\n      email: stateEmail,\n    };\n    console.log('send', user);\n    \n    dispatch(updateUser(user));\n  };\n  console.log('text', userName);\n\n\n    //UPLOAD IMAGE\n    // const fileRef = useRef(null);\n    // const [ loading, setLoading ] = useState(false);\n    // const startUploadSumbit = useCallback( event => {\n    //   event.preventDefault();\n  \n    //   const fetchData = async (uint8Array: any) => {\n    //     try {\n    //       const response = await axios({\n    //         method: 'post',\n    //         url: '/avatar',\n    //         data: [...uint8Array] // не отправляем в JSON, размер изображения увеличится\n    //       });\n  \n    //       setLoading(false);\n    //       console.log(response);\n    //     } catch (e) {\n    //       console.error((e), 'function handleSubmit')\n    //     }\n    //   };\n    //   fetchData(Uint8Array);\n      // if(!fileRef.current) return void null;\n  \n      // const reader = new FileReader();\n      // reader.onloadend = () => {\n      //   const uint8Array = new Uint8Array(reader.result);\n      //   setLoading(true);\n      //   fetchData(uint8Array);\n      // };\n    \n      // рекомендованный метод\n      // reader.readAsArrayBuffer(fileRef.current[0]);\n  \n      // метод reader.readAsBinaryString(fileRef.current[0])\n      // согласно MDN,\n      // уже был однажды удален из File API specification,\n      // но после его вернули\n      // в использование, но все же рекомендуют\n      // использовать readAsArrayBuffer\n      // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsBinaryString\n    // }, []);\n  \n\n  return (\n    <Main >\n      <div className={styles.user_update_information_main_wrapper}>\n        <div className={styles.default_user_info_wrapper}>\n          <div className={styles.user_avatar}>\n            <img src={userAvatar} className={styles.circle_avatar} alt='User Avatar'></img>\n\n            {/* <form onSubmit={startUploadSumbit}>\n              <div>\n                <input\n                  onChange={e => e.target.files}\n                  accept=\"image/*\"\n                  type=\"file\"\n                  id=\"button-file\"\n                />\n              </div>\n              <button type=\"submit\">{loading ? 'Сохраняю...' : 'Сохранить'}</button>\n          </form> */}\n\n          </div>\n                {/* <form className={styles.avatar_form} action=\"/profile\" method=\"post\" encType=\"multipart/form-data\">\n                   <input className={styles.avatar_form_input} type=\"file\" name=\"avatar\" placeholder='Enter your Last Name'/>\n                </form> */}\n\n                <form className={styles.avatar_form} action=\"/upload\" method=\"post\" encType=\"multipart/form-data\">\n                  <label>Upload your Avatar</label><br/>\n                  <input className={styles.avatar_form_input} type=\"file\" name=\"filedata\" /><br/>\n                  <input className={styles.avatar_form_send_button} type=\"submit\" value=\"Send\" />\n              </form>\n\n          <div className={styles.def_string_info}>\n            <h6>Name:</h6><p>{stateName}</p>\n          </div>\n\n          <div className={styles.def_string_info}>\n            <h6>Last Name:</h6><p>{stateSurName}</p>\n          </div>\n\n          <div className={styles.def_string_info}>\n            <h6>Login:</h6><p>{stateLogin}</p>\n          </div>\n\n          <div className={styles.def_string_info}>\n            <h6>Date of born:</h6><p>{thrueDateFormat}</p>\n          </div>\n\n          <div className={styles.link_change_email}>\n            <a href=\"/email\">Change Email@adress</a>\n          </div>\n          {/* <button onSubmit={(deleteUsers)} className={styles.del_user_button}>DELETE USER</button> */}\n          {/* <span onClick={() => deleteUsers({email, })} className={styles.del_user_button}>DELETE USER</span> */}\n        </div>\n\n        <div className={styles.change_user_info_wrapper}>\n          {/* <form className={styles.form} onSubmit={userInfo}> */}\n          <form className={styles.form} onSubmit={userInfo}>\n            <h1>Change user information</h1>\n            <input onChange={(e) => setUserName(e.target.value)} name='name' defaultValue={stateName} type=\"text\" placeholder='Enter your Name' />\n            <input onChange={(e) => setUserSurName(e.target.value)} name='surname' defaultValue={stateSurName} type=\"text\" placeholder='Enter your Last Name' />\n            <input onChange={(e) => setUserLogin(e.target.value)} name='login' defaultValue={stateLogin} type=\"text\" placeholder='Enter your Login' />\n            {/* <input name='oldPassword' type=\"password\" placeholder='Enter your Old password'/>\n        <input name='newPassword' type=\"password\" placeholder='Enter your New password'/> */}\n            <input onChange={(e) => setUserPassword(e.target.value)} name='newPasswordControl'  required type=\"password\" placeholder='New password' />\n            <input onChange={(e) => setUserDob(e.target.value)} name='dob' type=\"date\" placeholder='Enter your Date of Born' />\n            <button type=\"submit\" className={styles.registrationButton}>upadte information</button>\n          </form>\n        </div>\n      </div>\n    </Main>\n  );\n};\n\nexport default UserPage;","/Users/chistofor/Documents/project/taskBoard/client/src/pages/homePage/homePage.tsx",[],"/Users/chistofor/Documents/project/taskBoard/client/src/pages/login/loginPage.tsx",["109"],"\nimport React, { useEffect, useState } from 'react';\n\nimport styles from './loginPage.module.scss';\nimport Main from \"../components/main/Main\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IUser } from '../../types/types';\nimport { loginUser } from \"../../store/userReducer/userThunk\";\nimport { useAppSelector } from '../../store/reducers';\nimport { useHistory } from 'react-router';\n\nconst UserLogin: React.FC = (): JSX.Element => {\n  const [userLogin, setUserLogin] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n\n  const auth = useAppSelector((state) => state.user.auth)\n\n  let history = useHistory();\n\n\n  const dispatch = useDispatch();\n\n\n  const userInfo: React.FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    console.log('event', event);\n\n    const user: IUser = {\n      login: userLogin,\n      email: userEmail,\n      password: userPassword,\n      name: '',\n      surname: '',\n      dob: ''\n    };\n    dispatch(loginUser(user));\n  };\n\n  useEffect(() => {\n    if (auth) {history.push(\"/user\")}\n    }, [auth, history])\n    \n\n  return (\n    <Main>\n      <form className={styles.form} onSubmit={userInfo}>\n        <h1>LOGIN</h1>\n        <input onChange={(e) => setUserLogin(e.target.value)} name='login' type=\"text\" placeholder='Enter your Login' />\n        <input onChange={(e) => setUserEmail(e.target.value)} name='email' type=\"email\" placeholder='Enter your Email' />\n        <input onChange={(e) => setUserPassword(e.target.value)} name='password' type=\"password\" placeholder='Enter your Password' />\n        <button type=\"submit\" className={styles.registrationButton}>LOGIN</button>\n      </form>\n    </Main>\n  );\n}\nexport default UserLogin;\n","/Users/chistofor/Documents/project/taskBoard/client/src/pages/registration/registartionWindow.tsx",["110"],"import Main from \"../components/main/Main\";\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './userRegistrationFormStyle.module.scss';\n\nimport { registrationUsers } from \"../../store/userReducer/userThunk\";\nimport { IUser } from \"../../types/types\";\nimport { useAppSelector } from \"../../store/reducers\";\nimport { useHistory } from \"react-router\";\n\nconst UserRegistration: React.FC = (): JSX.Element => {\n  const [userName, setUserName] = useState('');\n  const [userSurName, setUserSurName] = useState('');\n  const [userLogin, setUserLogin] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n  const [userDob, setUserDob] = useState('');\n\n  const auth = useAppSelector((state) => state.user.auth)  \n\n  const dispatch = useDispatch();\n\n  let history = useHistory();\n\n\n  const userInfo: React.FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    console.log('event', event);\n    const parseDate = new Date(userDob);\n\n    const user: IUser = {\n      name: userName,\n      surname: userSurName,\n      login: userLogin,\n      email: userEmail,\n      password: userPassword,\n      dob: parseDate,\n    };\n    dispatch(registrationUsers(user));\n  };\n\n  useEffect(() => {\n    if (auth) {history.push(\"/user\")}\n    }, [auth, history])\n\n  return (\n    <Main>\n      <form className={styles.form} onSubmit={userInfo}>\n        <h1>REGISTRATION</h1>\n        <input onChange={(e) => setUserName(e.target.value)} name='name' type=\"text\" placeholder='Enter your Name' />\n        <input onChange={(e) => setUserSurName(e.target.value)} name='surname' type=\"text\" placeholder='Enter your Last Name' />\n        <input onChange={(e) => setUserLogin(e.target.value)} name='login' type=\"text\" placeholder='Enter your Login' />\n        <input onChange={(e) => setUserEmail(e.target.value)} name='email' type=\"email\" placeholder='Enter your Email' />\n        <input onChange={(e) => setUserPassword(e.target.value)} name='password' type=\"password\" placeholder='Enter your Password' />\n        <input onChange={(e) => setUserDob(e.target.value)} name='dob' type=\"date\" placeholder='Enter your Date of Born' />\n        {/* <input name='avatar' type=\"text\" placeholder='Choice your Avatar'/> */}\n        <button type=\"submit\" className={styles.registrationButton}>REGISTRATION</button>\n      </form>\n    </Main>\n  );\n}\nexport default UserRegistration;\n\n\n//  const getUserIfo: React.FC<Props> = (props) =>{\n//     const [state, setState] = useState<UserInterface[]>([]);\n\n//     useEffect(() => {\n//       console.log('getUserIfo')\n//       instance.get('user')\n//         .then(r => {\n//           console.log('result', r.data)\n//           setState(r.data)\n//         })\n//         .catch(e => console.log('error', e.message))\n//     }, []);\n\n//     return (\n//     <main className={styles.main}>\n//       {state.map(item => <h1 key={item.id}>{item.name}</h1>)}\n//       {props.children}\n//     </main>\n//       );\n//   }\n\n\n","/Users/chistofor/Documents/project/taskBoard/client/src/pages/components/main/Main.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":21,"column":9,"nodeType":"117","messageId":"118","endLine":21,"endColumn":15},{"ruleId":"119","severity":1,"message":"120","line":39,"column":6,"nodeType":"121","endLine":39,"endColumn":8,"suggestions":"122"},{"ruleId":"115","severity":1,"message":"123","line":3,"column":10,"nodeType":"117","messageId":"118","endLine":3,"endColumn":29},{"ruleId":"115","severity":1,"message":"124","line":3,"column":101,"nodeType":"117","messageId":"118","endLine":3,"endColumn":115},{"ruleId":"115","severity":1,"message":"125","line":3,"column":150,"nodeType":"117","messageId":"118","endLine":3,"endColumn":164},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"126","line":50,"column":13,"nodeType":"117","messageId":"118","endLine":50,"endColumn":18},{"ruleId":"115","severity":1,"message":"127","line":4,"column":26,"nodeType":"117","messageId":"118","endLine":4,"endColumn":32},{"ruleId":"115","severity":1,"message":"128","line":4,"column":34,"nodeType":"117","messageId":"118","endLine":4,"endColumn":45},{"ruleId":"115","severity":1,"message":"129","line":12,"column":18,"nodeType":"117","messageId":"118","endLine":12,"endColumn":28},{"ruleId":"115","severity":1,"message":"130","line":13,"column":8,"nodeType":"117","messageId":"118","endLine":13,"endColumn":13},{"ruleId":"115","severity":1,"message":"131","line":6,"column":10,"nodeType":"117","messageId":"118","endLine":6,"endColumn":21},{"ruleId":"115","severity":1,"message":"131","line":4,"column":23,"nodeType":"117","messageId":"118","endLine":4,"endColumn":34},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"@typescript-eslint/no-unused-vars","'isAuth' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'actionsGetTokenAuth' is defined but never used.","'actionsLogUser' is defined but never used.","'actionsSetUser' is defined but never used.","'users' is assigned a value but never used.","'useRef' is defined but never used.","'useCallback' is defined but never used.","'compareAsc' is defined but never used.","'axios' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [dispatch]",{"range":"137","text":"138"},[1197,1199],"[dispatch]"]