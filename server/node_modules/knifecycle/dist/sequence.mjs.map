{"version":3,"sources":["../src/sequence.ts"],"names":["YError","MAX_ITERATIONS","buildInitializationSequence","rootNode","batches","i","batch","recursivelyGetNextSequenceBatch","length","push","node","nodeIsALeaf","__childNodes","nodeIsInBatches","every","childNode","concat","__name","reduce","Set","some","includes"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAOA,MAAMC,cAAc,GAAG,EAAvB;AAEA,OAAO,SAASC,2BAAT,CAAqCC,QAArC,EAAiE;AACtE,QAAMC,OAAmB,GAAG,EAA5B;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOA,CAAC,GAAGJ,cAAX,EAA2B;AACzB,UAAMK,KAAK,GAAGC,+BAA+B,CAACJ,QAAD,EAAWC,OAAX,CAA7C;;AAEA,QAAI,MAAME,KAAK,CAACE,MAAhB,EAAwB;AACtB;AACD;;AACDJ,IAAAA,OAAO,CAACK,IAAR,CAAaH,KAAb;AACAD,IAAAA,CAAC;AACF;;AAED,MAAIA,CAAC,KAAKJ,cAAV,EAA0B;AACxB,UAAM,IAAID,MAAJ,CAAW,gCAAX,CAAN;AACD;;AAED,SAAOI,OAAP;AACD;;AAED,SAASG,+BAAT,CACEG,IADF,EAEEN,OAFF,EAGEE,KAAe,GAAG,EAHpB,EAIY;AACV,QAAMK,WAAW,GAAG,EAAED,IAAI,CAACE,YAAL,IAAqBF,IAAI,CAACE,YAAL,CAAkBJ,MAAzC,CAApB;;AAEA,MAAIK,eAAe,CAACT,OAAD,EAAUM,IAAV,CAAnB,EAAoC;AAClC,WAAOJ,KAAP;AACD;;AAED,MACEK,WAAW,IACXD,IAAI,CAACE,YAAL,CAAkBE,KAAlB,CAAyBC,SAAD,IACtBF,eAAe,CAACT,OAAD,EAAUW,SAAV,CADjB,CAFF,EAKE;AACA,WAAOT,KAAK,CAACU,MAAN,CAAaN,IAAI,CAACO,MAAlB,CAAP;AACD;;AAED,SAAOP,IAAI,CAACE,YAAL,CAAkBM,MAAlB,CACL,CAACZ,KAAD,EAAQS,SAAR,KAAsB,CACpB,GAAG,IAAII,GAAJ,CAAQZ,+BAA+B,CAACQ,SAAD,EAAYX,OAAZ,EAAqBE,KAArB,CAAvC,CADiB,CADjB,EAILA,KAJK,CAAP;AAMD;;AAED,SAASO,eAAT,CAAyBT,OAAzB,EAA8CM,IAA9C,EAAmE;AACjE,SAAON,OAAO,CAACgB,IAAR,CAAcd,KAAD,IAAWA,KAAK,CAACe,QAAN,CAAeX,IAAI,CAACO,MAApB,CAAxB,CAAP;AACD","sourcesContent":["import YError from 'yerror';\n\nexport type Node = {\n  __name: string;\n  __childNodes?: Node[];\n};\n\nconst MAX_ITERATIONS = 99;\n\nexport function buildInitializationSequence(rootNode: Node): string[][] {\n  const batches: string[][] = [];\n  let i = 0;\n\n  while (i < MAX_ITERATIONS) {\n    const batch = recursivelyGetNextSequenceBatch(rootNode, batches);\n\n    if (0 === batch.length) {\n      break;\n    }\n    batches.push(batch);\n    i++;\n  }\n\n  if (i === MAX_ITERATIONS) {\n    throw new YError('E_PROBABLE_CIRCULAR_DEPENDENCY');\n  }\n\n  return batches;\n}\n\nfunction recursivelyGetNextSequenceBatch(\n  node: Node,\n  batches: string[][],\n  batch: string[] = [],\n): string[] {\n  const nodeIsALeaf = !(node.__childNodes && node.__childNodes.length);\n\n  if (nodeIsInBatches(batches, node)) {\n    return batch;\n  }\n\n  if (\n    nodeIsALeaf ||\n    node.__childNodes.every((childNode: Node) =>\n      nodeIsInBatches(batches, childNode),\n    )\n  ) {\n    return batch.concat(node.__name);\n  }\n\n  return node.__childNodes.reduce(\n    (batch, childNode) => [\n      ...new Set(recursivelyGetNextSequenceBatch(childNode, batches, batch)),\n    ],\n    batch,\n  );\n}\n\nfunction nodeIsInBatches(batches: string[][], node: Node): boolean {\n  return batches.some((batch) => batch.includes(node.__name));\n}\n"],"file":"sequence.mjs"}