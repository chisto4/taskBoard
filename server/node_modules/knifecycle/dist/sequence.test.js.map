{"version":3,"sources":["../src/sequence.test.ts"],"names":["describe","it","tree","__name","assert","deepEqual","__childNodes"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport { buildInitializationSequence } from './sequence';\n\ndescribe('buildInitializationSequence()', () => {\n  it('should work with one level trees', () => {\n    const tree = {\n      __name: 'lol',\n    };\n\n    assert.deepEqual(buildInitializationSequence(tree), [['lol']]);\n  });\n\n  it('should work with multi-level trees', () => {\n    const tree = {\n      __name: 'lol',\n      __childNodes: [\n        {\n          __name: 'lol 1',\n          __childNodes: [\n            {\n              __name: 'lol 1.1',\n              __childNodes: [\n                {\n                  __name: 'lol 1.1.1',\n                  __childNodes: [],\n                },\n              ],\n            },\n            {\n              __name: 'lol 1.2',\n            },\n          ],\n        },\n        {\n          __name: 'lol 2',\n          __childNodes: [\n            {\n              __name: 'lol 2.1',\n              __childNodes: [],\n            },\n          ],\n        },\n        {\n          __name: 'lol 3',\n          __childNodes: [\n            {\n              __name: 'lol 3.1',\n              __childNodes: [\n                {\n                  __name: 'lol 3.1.1',\n                  __childNodes: [],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n\n    assert.deepEqual(buildInitializationSequence(tree), [\n      ['lol 1.1.1', 'lol 1.2', 'lol 2.1', 'lol 3.1.1'],\n      ['lol 1.1', 'lol 2', 'lol 3.1'],\n      ['lol 1', 'lol 3'],\n      ['lol'],\n    ]);\n  });\n\n  it('should work with multi-level trees and cross dependencies', () => {\n    const tree = {\n      __name: 'lol',\n      __childNodes: [\n        {\n          __name: 'lol 1',\n          __childNodes: [\n            {\n              __name: 'lol 1.1',\n              __childNodes: [\n                {\n                  __name: 'lol 1.1.1',\n                  __childNodes: [],\n                },\n              ],\n            },\n            {\n              __name: 'lol 1.2',\n            },\n            {\n              __name: 'lol 1.3',\n              __childNodes: [\n                {\n                  __name: 'lol 3',\n                  __childNodes: [\n                    {\n                      __name: 'lol 3.1',\n                      __childNodes: [\n                        {\n                          __name: 'lol 2',\n                          __childNodes: [\n                            {\n                              __name: 'lol 2.1',\n                              __childNodes: [],\n                            },\n                          ],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          __name: 'lol 2',\n          __childNodes: [\n            {\n              __name: 'lol 2.1',\n              __childNodes: [],\n            },\n          ],\n        },\n        {\n          __name: 'lol 3',\n          __childNodes: [\n            {\n              __name: 'lol 3.1',\n              __childNodes: [\n                {\n                  __name: 'lol 2',\n                  __childNodes: [\n                    {\n                      __name: 'lol 2.1',\n                      __childNodes: [],\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n\n    assert.deepEqual(buildInitializationSequence(tree), [\n      ['lol 1.1.1', 'lol 1.2', 'lol 2.1'],\n      ['lol 1.1', 'lol 2'],\n      ['lol 3.1'],\n      ['lol 3'],\n      ['lol 1.3'],\n      ['lol 1'],\n      ['lol'],\n    ]);\n  });\n});\n"],"file":"sequence.test.js"}