{"version":3,"sources":["../src/build.test.ts"],"names":["describe","aProvider","service","mockedDepsHash","NODE_ENV","dep1","inject","type","name","dep2","dep3","initAutoloader","singleton","$autoload","Promise","resolve","path","initializer","reject","YError","it","$","Knifecycle","register","initInitializerBuilder","buildInitializer","run","content","assert","equal","modules"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAGAA,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AACjC,iBAAeC,SAAf,GAA2B;AACzB,WAAO;AACLC,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD;;AACD,QAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE,gBAAS,UAAT,EAAqB,aAArB,CADW;AAErBC,IAAAA,IAAI,EAAE,mBACJ;AACEC,MAAAA,MAAM,EAAE,EADV;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADI,EAMJP,SANI,CAFe;AAUrBQ,IAAAA,IAAI,EAAE,mBACJ;AACEH,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,UAAT,CADV;AAEEC,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADI,EAMJP,SANI,CAVe;AAkBrBS,IAAAA,IAAI,EAAE,mBACJ;AACEJ,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,CADV;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADI,EAMJP,SANI;AAlBe,GAAvB;AA2BA,QAAMU,cAAc,GAAG,mBACrB;AACEH,IAAAA,IAAI,EAAE,WADR;AAEED,IAAAA,IAAI,EAAE,SAFR;AAGED,IAAAA,MAAM,EAAE,EAHV;AAIEM,IAAAA,SAAS,EAAE;AAJb,GADqB,EAOrB,YAAY;AACV,WAAO,eAAeC,SAAf,CAAyBL,IAAzB,EAA+B;AACpC,aAAOL,cAAc,CAACK,IAAD,CAAd,GACHM,OAAO,CAACC,OAAR,CAAgB;AACdC,QAAAA,IAAI,EAAG,cAAaR,IAAK,EADX;AAEdS,QAAAA,WAAW,EAAEd,cAAc,CAACK,IAAD;AAFb,OAAhB,CADG,GAKHM,OAAO,CAACI,MAAR,CAAe,IAAIC,eAAJ,CAAW,wBAAX,EAAqCX,IAArC,CAAf,CALJ;AAMD,KAPD;AAQD,GAhBoB,CAAvB;AAmBAY,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACtD,UAAMC,CAAC,GAAG,IAAIC,SAAJ,EAAV;AAKAD,IAAAA,CAAC,CAACE,QAAF,CAAW,gBAAS,KAAT,EAAgB,cAAhB,CAAX;AACAF,IAAAA,CAAC,CAACE,QAAF,CAAWZ,cAAX;AACAU,IAAAA,CAAC,CAACE,QAAF,CAAWC,cAAX;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAuB,MAAMJ,CAAC,CAACK,GAAF,CAAM,CAAC,kBAAD,CAAN,CAAnC;AAEA,UAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAAC,CAAC,MAAD,EAAS,qBAAT,CAAD,CAAtC;;AACAG,oBAAOC,KAAP,CACEF,OADF,EAEG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjEI;AAmED,GAhFC,CAAF;AAkFAP,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC9C,UAAMC,CAAC,GAAG,IAAIC,SAAJ,EAAV;AAKAD,IAAAA,CAAC,CAACE,QAAF,CAAW,gBAAS,KAAT,EAAgB,cAAhB,CAAX;AACAF,IAAAA,CAAC,CAACE,QAAF,CAAWZ,cAAX;AACAU,IAAAA,CAAC,CAACE,QAAF,CAAWC,cAAX;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAuB,MAAMJ,CAAC,CAACK,GAAF,CAAM,CAAC,kBAAD,CAAN,CAAnC;AAEA,UAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAAC,CAAC,MAAD,EAAS,qBAAT,CAAD,EAAkC;AACtEK,MAAAA,OAAO,EAAE;AAD6D,KAAlC,CAAtC;;AAGAF,oBAAOC,KAAP,CACEF,OADF,EAEG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjEI;AAmED,GAlFC,CAAF;AAmFD,CAzNO,CAAR","sourcesContent":["import assert from 'assert';\nimport YError from 'yerror';\nimport initInitializerBuilder from './build';\nimport Knifecycle, { initializer, constant } from '.';\nimport type { BuildInitializer } from './build';\n\ndescribe('buildInitializer', () => {\n  async function aProvider() {\n    return {\n      service: 'PROVIDER_SERVICE',\n    };\n  }\n  const mockedDepsHash = {\n    NODE_ENV: constant('NODE_ENV', 'development'),\n    dep1: initializer(\n      {\n        inject: [],\n        type: 'service',\n        name: 'dep1',\n      },\n      aProvider,\n    ),\n    dep2: initializer(\n      {\n        inject: ['dep1', 'NODE_ENV'],\n        type: 'provider',\n        name: 'dep2',\n      },\n      aProvider,\n    ),\n    dep3: initializer(\n      {\n        inject: ['dep2', 'dep1', '?depOpt'],\n        type: 'service',\n        name: 'dep3',\n      },\n      aProvider,\n    ),\n  };\n  const initAutoloader = initializer(\n    {\n      name: '$autoload',\n      type: 'service',\n      inject: [],\n      singleton: true,\n    },\n    async () => {\n      return async function $autoload(name) {\n        return mockedDepsHash[name]\n          ? Promise.resolve({\n              path: `./services/${name}`,\n              initializer: mockedDepsHash[name],\n            })\n          : Promise.reject(new YError('E_UNMATCHED_DEPENDENCY', name));\n      };\n    },\n  );\n\n  it('should build an initialization module', async () => {\n    const $ = new Knifecycle<{\n      buildInitializer: BuildInitializer;\n      PWD: string;\n    }>();\n\n    $.register(constant('PWD', '~/my-project'));\n    $.register(initAutoloader);\n    $.register(initInitializerBuilder);\n\n    const { buildInitializer } = await $.run(['buildInitializer']);\n\n    const content = await buildInitializer(['dep1', 'finalMappedDep>dep3']);\n    assert.equal(\n      content,\n      `\n// Definition batch #0\nimport initDep1 from './services/dep1';\nconst NODE_ENV = \"development\";\n\n// Definition batch #1\nimport initDep2 from './services/dep2';\n\n// Definition batch #2\nimport initDep3 from './services/dep3';\n\nexport async function initialize(services = {}) {\n  // Initialization batch #0\n  const batch0 = {\n    dep1: initDep1({\n    }),\n    NODE_ENV: Promise.resolve(NODE_ENV),\n  };\n\n  await Promise.all(\n    Object.keys(batch0)\n    .map(key => batch0[key])\n  );\n\n  services['dep1'] = await batch0['dep1'];\n  services['NODE_ENV'] = await batch0['NODE_ENV'];\n\n  // Initialization batch #1\n  const batch1 = {\n    dep2: initDep2({\n      dep1: services['dep1'],\n      NODE_ENV: services['NODE_ENV'],\n    }).then(provider => provider.service),\n  };\n\n  await Promise.all(\n    Object.keys(batch1)\n    .map(key => batch1[key])\n  );\n\n  services['dep2'] = await batch1['dep2'];\n\n  // Initialization batch #2\n  const batch2 = {\n    dep3: initDep3({\n      dep2: services['dep2'],\n      dep1: services['dep1'],\n      depOpt: services['depOpt'],\n    }),\n  };\n\n  await Promise.all(\n    Object.keys(batch2)\n    .map(key => batch2[key])\n  );\n\n  services['dep3'] = await batch2['dep3'];\n\n  return {\n    dep1: services['dep1'],\n    finalMappedDep: services['dep3'],\n  };\n}\n`,\n    );\n  });\n\n  it('should allows to use commonjs', async () => {\n    const $ = new Knifecycle<{\n      buildInitializer: BuildInitializer;\n      PWD: string;\n    }>();\n\n    $.register(constant('PWD', '~/my-project'));\n    $.register(initAutoloader);\n    $.register(initInitializerBuilder);\n\n    const { buildInitializer } = await $.run(['buildInitializer']);\n\n    const content = await buildInitializer(['dep1', 'finalMappedDep>dep3'], {\n      modules: 'commonjs',\n    });\n    assert.equal(\n      content,\n      `\n// Definition batch #0\nconst initDep1 = (() => { const m = require('./services/dep1'); return m && m.default || m; })();\nconst NODE_ENV = \"development\";\n\n// Definition batch #1\nconst initDep2 = (() => { const m = require('./services/dep2'); return m && m.default || m; })();\n\n// Definition batch #2\nconst initDep3 = (() => { const m = require('./services/dep3'); return m && m.default || m; })();\n\nmodule.exports = {}; module.exports.initialize = async function initialize(services = {}) {\n  // Initialization batch #0\n  const batch0 = {\n    dep1: initDep1({\n    }),\n    NODE_ENV: Promise.resolve(NODE_ENV),\n  };\n\n  await Promise.all(\n    Object.keys(batch0)\n    .map(key => batch0[key])\n  );\n\n  services['dep1'] = await batch0['dep1'];\n  services['NODE_ENV'] = await batch0['NODE_ENV'];\n\n  // Initialization batch #1\n  const batch1 = {\n    dep2: initDep2({\n      dep1: services['dep1'],\n      NODE_ENV: services['NODE_ENV'],\n    }).then(provider => provider.service),\n  };\n\n  await Promise.all(\n    Object.keys(batch1)\n    .map(key => batch1[key])\n  );\n\n  services['dep2'] = await batch1['dep2'];\n\n  // Initialization batch #2\n  const batch2 = {\n    dep3: initDep3({\n      dep2: services['dep2'],\n      dep1: services['dep1'],\n      depOpt: services['depOpt'],\n    }),\n  };\n\n  await Promise.all(\n    Object.keys(batch2)\n    .map(key => batch2[key])\n  );\n\n  services['dep3'] = await batch2['dep3'];\n\n  return {\n    dep1: services['dep1'],\n    finalMappedDep: services['dep3'],\n  };\n}\n`,\n    );\n  });\n});\n"],"file":"build.test.js"}