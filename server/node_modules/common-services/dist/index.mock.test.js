"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var services = _interopRequireWildcard(require("./index.mock"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('index.mock', () => {
  let files;
  beforeAll(done => {
    _fs.default.readdir(__dirname, (err, _files_) => {
      if (err) {
        done(err);
        return;
      }

      files = _files_;
      done();
    });
  });
  test('should import all mocks of the src folder', done => {
    Promise.all(files.filter(file => !['index.mock.ts'].includes(file)).filter(file => !file.endsWith('.d.ts')).filter(file => file.endsWith('.mock.ts')).map(file => require(_path.default.join(__dirname, file)).default) // eslint-disable-line
    ).then(modules => {
      _assert.default.deepEqual(Object.keys(services).sort(), modules.map(module => module.name).map(name => name.replace(/(bound )*/, '')).sort());
    }).then(() => done()).catch(done);
  });
});
//# sourceMappingURL=index.mock.test.js.map