{"version":3,"sources":["../src/index.test.ts"],"names":["assert","fs","path","services","describe","files","beforeAll","done","readdir","__dirname","err","_files_","test","Promise","all","filter","file","includes","endsWith","map","require","join","default","then","modules","deepEqual","Object","keys","sort","name","replace","module","concat","catch"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,QAAZ,MAA0B,SAA1B;AAEAC,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtB,MAAIC,KAAJ;AAEAC,EAAAA,SAAS,CAAEC,IAAD,IAAU;AAClBN,IAAAA,EAAE,CAACO,OAAH,CAAWC,SAAX,EAAsB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACtC,UAAID,GAAJ,EAAS;AACPH,QAAAA,IAAI,CAACG,GAAD,CAAJ;AACA;AACD;;AACDL,MAAAA,KAAK,GAAGM,OAAR;AACAJ,MAAAA,IAAI;AACL,KAPD;AAQD,GATQ,CAAT;AAWAK,EAAAA,IAAI,CAAC,8CAAD,EAAkDL,IAAD,IAAU;AAC7DM,IAAAA,OAAO,CAACC,GAAR,CACET,KAAK,CACFU,MADH,CACWC,IAAD,IAAU,CAAC,CAAC,GAAD,EAAM,IAAN,EAAY,UAAZ,EAAwBC,QAAxB,CAAiCD,IAAjC,CADrB,EAEGD,MAFH,CAEWC,IAAD,IAAU,CAACA,IAAI,CAACE,QAAL,CAAc,UAAd,CAFrB,EAGGH,MAHH,CAGWC,IAAD,IAAUA,IAAI,KAAK,eAH7B,EAIGD,MAJH,CAIWC,IAAD,IAAU,CAACA,IAAI,CAACE,QAAL,CAAc,OAAd,CAJrB,EAKGH,MALH,CAKWC,IAAD,IAAU,CAACA,IAAI,CAACE,QAAL,CAAc,UAAd,CALrB,EAMGC,GANH,CAMQH,IAAD,IAAUI,OAAO,CAAClB,IAAI,CAACmB,IAAL,CAAUZ,SAAV,EAAqBO,IAArB,CAAD,CAAP,CAAoCM,OANrD,CADF,EASGC,IATH,CASSC,OAAD,IAAa;AACjBxB,MAAAA,MAAM,CAACyB,SAAP,CACEC,MAAM,CAACC,IAAP,CAAYxB,QAAZ,EACGyB,IADH,GAEGT,GAFH,CAEQU,IAAD,IAAUA,IAAI,CAACC,OAAL,CAAa,mBAAb,EAAkC,QAAlC,CAFjB,CADF,EAIEN,OAAO,CACJL,GADH,CACQY,MAAD,IAAaA,MAAD,CAAgBF,IADnC,EAEGV,GAFH,CAEQU,IAAD,IAAUA,IAAI,CAACC,OAAL,CAAa,WAAb,EAA0B,EAA1B,CAFjB,EAIGE,MAJH,CAIU,CAAC,gBAAD,EAAmB,qBAAnB,CAJV,EAKGJ,IALH,EAJF;AAWD,KArBH,EAsBGL,IAtBH,CAsBQ,MAAMhB,IAAI,EAtBlB,EAuBG0B,KAvBH,CAuBS1B,IAvBT;AAwBD,GAzBG,CAAJ;AA0BD,CAxCO,CAAR","sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport * as services from './index';\n\ndescribe('index', () => {\n  let files;\n\n  beforeAll((done) => {\n    fs.readdir(__dirname, (err, _files_) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      files = _files_;\n      done();\n    });\n  });\n\n  test('should import all services of the src folder', (done) => {\n    Promise.all(\n      files\n        .filter((file) => !['.', '..', 'index.ts'].includes(file))\n        .filter((file) => !file.endsWith('.test.ts'))\n        .filter((file) => file !== '__snapshots__')\n        .filter((file) => !file.endsWith('.d.ts'))\n        .filter((file) => !file.endsWith('.mock.ts'))\n        .map((file) => require(path.join(__dirname, file)).default), // eslint-disable-line\n    )\n      .then((modules) => {\n        assert.deepEqual(\n          Object.keys(services)\n            .sort()\n            .map((name) => name.replace(/^init(.*)Service$/, 'init$1')),\n          modules\n            .map((module) => (module as any).name as string)\n            .map((name) => name.replace(/(bound )*/, ''))\n            // Also exports LogService defaults/interfaces\n            .concat(['DEFAULT_LOGGER', 'DEFAULT_LOG_ROUTING'])\n            .sort(),\n        );\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"index.test.mjs"}