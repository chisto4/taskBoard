{"version":3,"sources":["../src/delay.mock.ts"],"names":["YError","initDelayService","reuseSpecialProps","initDelayMock","_","pendingPromises","Promise","resolve","service","create","clear","__resolve","__resolveAll","__reject","__rejectAll","_resolve","_reject","promise","reject","push","pendingPromiseIndex","findIndex","pendingPromise","splice","find","then","__delete","bind","all","map"],"mappings":"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","sourcesContent":["import YError from 'yerror';\nimport initDelayService from './delay';\nimport { reuseSpecialProps } from 'knifecycle';\nimport type { DelayService } from './delay';\n\n/* Architecture Note #1.4.1: Mocking delays\n\nThis mock is largely inspired by the `$timeout` one of\n AngularJS. It allows to resolve/reject pending delays\n for testing. That said, it does it asynchronously\n where the former one was synchronous. This is not a\n bug but a design choice to keep the closest possible\n to what would happen in actual code.\n*/\n\nexport default reuseSpecialProps(\n  (initDelayService as unknown) as typeof initDelayMock,\n  initDelayMock,\n);\n\n/**\n * Instantiate the delay service mock\n * @name initDelayMock\n * @function\n * @return {Promise<Object>}\n * A promise of the mocked delay service\n * @example\n * import initDelayMock from 'common-services/dist/delay.mock';\n * import assert from 'assert';\n *\n * const delay = await initDelayMock();\n *\n * const delayPromise = delay.create(1000);\n *\n * delay.resolve(delayPromise);\n *\n * delayPromise.then(() => {\n *   // Any code here will execute immediatly\n *   // instead of after a 1000ms delay\n * });\n */\nfunction initDelayMock(\n  _: any,\n): Promise<{\n  service: {\n    create: (delay: number) => Promise<void>;\n    clear: (promise: Promise<any>) => Promise<void>;\n    __resolve: (promise: Promise<any>) => Promise<void>;\n    __resolveAll: () => Promise<void>;\n    __reject: (promise: Promise<any>) => Promise<void>;\n    __rejectAll: () => Promise<void>;\n  };\n}> {\n  const pendingPromises = [];\n\n  return Promise.resolve({\n    service: {\n      create,\n      clear,\n      __resolve,\n      __resolveAll,\n      __reject,\n      __rejectAll,\n    },\n  });\n\n  function create(_: number): Promise<void> {\n    let _resolve;\n    let _reject;\n    const promise = new Promise((resolve, reject) => {\n      _reject = reject;\n      _resolve = resolve;\n    });\n\n    pendingPromises.push({\n      promise,\n      resolve: _resolve,\n      reject: _reject,\n    });\n    return promise as Promise<void>;\n  }\n\n  async function clear(promise: Promise<any>) {\n    const pendingPromiseIndex = pendingPromises.findIndex(\n      (pendingPromise) => pendingPromise.promise === promise,\n    );\n\n    if (-1 === pendingPromiseIndex) {\n      return Promise.reject(new YError('E_BAD_DELAY'));\n    }\n    pendingPromises[pendingPromiseIndex].reject(new YError('E_DELAY_CLEARED'));\n    pendingPromises.splice(pendingPromiseIndex, 1);\n    return Promise.resolve() as Promise<void>;\n  }\n\n  function __resolve(promise: Promise<any>) {\n    const pendingPromise = pendingPromises.find(\n      (pendingPromise) => pendingPromise.promise === promise,\n    );\n\n    if (!pendingPromise) {\n      return Promise.reject(new YError('E_BAD_DELAY'));\n    }\n    pendingPromise.resolve();\n    return Promise.resolve().then(__delete.bind(null, promise));\n  }\n\n  async function __resolveAll() {\n    await Promise.all(pendingPromises.map(({ promise }) => __resolve(promise)));\n  }\n\n  function __reject(promise) {\n    const pendingPromise = pendingPromises.find(\n      (pendingPromise) => pendingPromise.promise === promise,\n    );\n\n    if (!pendingPromise) {\n      return Promise.reject(new YError('E_BAD_DELAY'));\n    }\n    pendingPromise.reject(new YError('E_DELAY_CLEARED'));\n    return Promise.resolve().then(__delete.bind(null, promise));\n  }\n\n  async function __rejectAll() {\n    await Promise.all(pendingPromises.map(({ promise }) => __reject(promise)));\n  }\n\n  function __delete(promise: Promise<any>) {\n    const pendingPromiseIndex = pendingPromises.findIndex(\n      (pendingPromise) => pendingPromise.promise === promise,\n    );\n    pendingPromises.splice(pendingPromiseIndex, 1);\n  }\n}\n"],"file":"delay.mock.mjs"}