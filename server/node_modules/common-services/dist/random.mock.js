"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sinon = _interopRequireDefault(require("sinon"));

var _random = _interopRequireDefault(require("./random"));

var _knifecycle = require("knifecycle");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Architecture Note #1.3.1: Mocking randomness

The random mock uses the [`sinon`](https://github.com/sinonjs/sinon/)
 module under the hood like for the logging mock.
*/
var _default = (0, _knifecycle.reuseSpecialProps)(_random.default, initRandomMock);
/**
 * Instantiate the random service mock
 * @name initRandomMock
 * @function
 * @return {Promise<Function>}  A promise of the mocked
 *  random function
 * @example
 * import initRandomMock from 'common-services/dist/random.mock';
 * import assert from 'assert';
 *
 * const random = await initRandomMock();
 *
 * random.returns(0.5); // A good limit value to test ;)
 *
 * assert.equal(random(), 0.5);
 * assert.deepEqual(random.args, [[]], 'Called once');
 *
 * random.reset();
 *
 * assert.deepEqual(random.args, []);
 */


exports.default = _default;

async function initRandomMock() {
  return _sinon.default.stub();
}
//# sourceMappingURL=random.mock.js.map