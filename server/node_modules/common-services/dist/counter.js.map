{"version":3,"sources":["../src/counter.ts"],"names":["noop","undefined","DEFAULT_COUNTER","firstCount","initCounter","COUNTER","log","currentCount","counter"],"mappings":";;;;;;;AAAA;;AAGA,SAASA,IAAT,GAAsB;AACpB,SAAOC,SAAP;AACD;;AAaD,MAAMC,eAAe,GAAG;AACtBC,EAAAA,UAAU,EAAE;AADU,CAAxB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;eAEe,2BAAU,yBAAYC,WAAZ,kCAAV,EAAoC,IAApC,C;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,eAAeA,WAAf,CAA2B;AACzBC,EAAAA,OAAO,GAAGH,eADe;AAEzBI,EAAAA,GAAG,GAAGN;AAFmB,CAA3B,EAGwD;AACtD,MAAIO,YAAY,GAAGF,OAAO,CAACF,UAA3B;AAEAG,EAAAA,GAAG,CAAC,OAAD,EAAU,mCAAV,CAAH;AAEA,SAAOE,OAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,iBAAeA,OAAf,GAAyB;AACvBF,IAAAA,GAAG,CAAC,OAAD,EAAU,sBAAV,EAAkCC,YAAlC,CAAH;AACA,WAAOA,YAAY,EAAnB;AACD;AACF","sourcesContent":["import { autoService, singleton } from 'knifecycle';\nimport type { LogService } from './log';\n\nfunction noop(): void {\n  return undefined;\n}\n\nexport interface CounterService {\n  (): Promise<number>;\n}\n\nexport type CounterServiceConfig = {\n  COUNTER?: { firstCount: number };\n};\nexport type CounterServiceDependencies = CounterServiceConfig & {\n  log?: LogService;\n};\n\nconst DEFAULT_COUNTER = {\n  firstCount: 1,\n};\n\n/* Architecture Note #1.6: Counter\n\nThe `counter` service provide a simple, local and\n stubbable counter.\n\nThe count are returned asynchronously in order\n to be easily maintained across several instances\n if needed later via another service with the same\n surface API.\n*/\n\nexport default singleton(autoService(initCounter), true);\n\n/**\n * Instantiate the counter service\n * @name initCounter\n * @function\n * @param  {Object}   services\n * The services to inject\n * @param  {Object}   [services.COUNTER=DEFAULT_COUNTER]\n * An optional configuration object\n * @param  {Object}   [services.log=noop]\n * An optional logging function\n * @return {Promise<Function>}\n * A promise of the counter function\n * @example\n * import initCounter from 'common-services/dist/counter';\n *\n * const counter = await initCounter({\n *   COUNTER: { firstCount: 1 },\n *   log: console.log.bind(console),\n * });\n */\nasync function initCounter({\n  COUNTER = DEFAULT_COUNTER,\n  log = noop,\n}: CounterServiceDependencies): Promise<CounterService> {\n  let currentCount = COUNTER.firstCount;\n\n  log('debug', 'ðŸ“‡ - Counter service initialized.');\n\n  return counter;\n\n  /**\n   * Returns the current count and increment the counter\n   * @return {Promise<number>}\n   * A promise of the current count\n   * @example\n   * console.log([\n   *   counter(),\n   *   counter(),\n   *   counter(),\n   * ]);\n   * // Prints: 1,2,3\n   */\n  async function counter() {\n    log('debug', 'ðŸ“‡ - Picked a count:', currentCount);\n    return currentCount++;\n  }\n}\n"],"file":"counter.js"}