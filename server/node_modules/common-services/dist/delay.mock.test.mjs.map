{"version":3,"sources":["../src/delay.mock.test.ts"],"names":["assert","YError","initDelayMock","describe","test","done","then","service","create","clear","__resolve","__resolveAll","__reject","__rejectAll","catch","delayPromise","Promise","resolve","all","delayPromises","Array","fill","map","err","equal","code"],"mappings":"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","sourcesContent":["/* eslint max-nested-callbacks:0 */\nimport assert from 'assert';\nimport YError from 'yerror';\nimport initDelayMock from './delay.mock';\n\ndescribe('initDelayMock', () => {\n  test('should work', (done) => {\n    initDelayMock({})\n      .then(\n        ({\n          service: {\n            create,\n            clear,\n            __resolve,\n            __resolveAll,\n            __reject,\n            __rejectAll,\n          },\n        }) => {\n          assert('function' === typeof create);\n          assert('function' === typeof clear);\n          assert('function' === typeof __resolve);\n          assert('function' === typeof __resolveAll);\n          assert('function' === typeof __reject);\n          assert('function' === typeof __rejectAll);\n        },\n      )\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('_resolve', () => {\n    test('should work', (done) => {\n      initDelayMock({})\n        .then(({ service: { create, __resolve } }) => {\n          const delayPromise = create(1000);\n\n          return Promise.resolve([__resolve(delayPromise), delayPromise]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  describe('_resolveAll', () => {\n    test('should work with no pending delays', (done) => {\n      initDelayMock({})\n        .then(({ service: { __resolveAll } }) => __resolveAll())\n        .then(() => done())\n        .catch(done);\n    });\n\n    test('should work with one pending delay', (done) => {\n      initDelayMock({})\n        .then(({ service: { create, __resolveAll } }) => {\n          const delayPromise = create(1000);\n\n          return Promise.all([delayPromise, __resolveAll()]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n\n    test('should work with 10 pending delays', (done) => {\n      initDelayMock({})\n        .then(({ service: { create, __resolveAll } }) => {\n          const delayPromises = new Array(10).fill(1).map(() => create(1000));\n\n          return Promise.all([__resolveAll(), ...delayPromises]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  describe('_reject', () => {\n    test('should work', (done) => {\n      initDelayMock({})\n        .then(({ service: { create, __reject } }) => {\n          const delayPromise = create(1000);\n\n          return Promise.all([\n            __reject(delayPromise),\n            delayPromise\n              .then(() => {\n                throw new YError('E_UNEXPECTED_SUCCESS');\n              })\n              .catch((err) => {\n                assert.equal(err.code, 'E_DELAY_CLEARED');\n              }),\n          ]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  describe('_rejectAll', () => {\n    test('should work with no pending delays', (done) => {\n      initDelayMock({})\n        .then(({ service: { __rejectAll } }) => __rejectAll())\n        .then(() => done())\n        .catch(done);\n    });\n\n    test('should work with one pending delay', (done) => {\n      initDelayMock({})\n        .then(({ service: { create, __rejectAll } }) => {\n          const delayPromise = create(1000);\n\n          return Promise.all([\n            delayPromise\n              .then(() => {\n                throw new YError('E_UNEXPECTED_SUCCESS');\n              })\n              .catch((err) => {\n                assert.equal(err.code, 'E_DELAY_CLEARED');\n              }),\n            __rejectAll(),\n          ]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n\n    test('should work with 10 pending delays', (done) => {\n      initDelayMock({})\n        .then(({ service: { create, __rejectAll } }) => {\n          const delayPromises = new Array(10)\n            .fill(1)\n            .map(() => create(1000))\n            .map((delayPromise) =>\n              delayPromise\n                .then(() => {\n                  throw new YError('E_UNEXPECTED_SUCCESS');\n                })\n                .catch((err) => {\n                  assert.equal(err.code, 'E_DELAY_CLEARED');\n                }),\n            );\n\n          return Promise.all([__rejectAll(), ...delayPromises]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n});\n"],"file":"delay.mock.test.mjs"}