{"version":3,"sources":["../src/delay.test.ts"],"names":["describe","log","jest","fn","beforeEach","mockReset","test","delay","expect","service","create","clear","dispose","mock","calls","toMatchInlineSnapshot","setTimeoutStub","spyOn","global","afterEach","mockClear","delayPromise","length","toEqual","clearTimeoutStub","Promise","resolve","catch","err","code","all","Knifecycle","register","initDelayService","run"],"mappings":"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","sourcesContent":["/* eslint max-nested-callbacks:0 */\nimport Knifecycle, { constant } from 'knifecycle';\nimport initDelayService from './delay';\n\ndescribe('initDelayService', () => {\n  const log = jest.fn();\n\n  beforeEach(() => {\n    log.mockReset();\n  });\n\n  test('should work', async () => {\n    const delay = await initDelayService({\n      log,\n    });\n\n    expect('function' === typeof delay.service.create);\n    expect('function' === typeof delay.service.clear);\n    expect('function' === typeof delay.dispose);\n    expect(log.mock.calls).toMatchInlineSnapshot(`\n      Array [\n        Array [\n          \"debug\",\n          \"⌛ - Delay service initialized.\",\n        ],\n      ]\n    `);\n  });\n\n  describe('delay.create', () => {\n    let setTimeoutStub;\n\n    beforeEach(() => {\n      setTimeoutStub = jest.spyOn(global, 'setTimeout');\n    });\n\n    afterEach(() => {\n      setTimeoutStub.mockClear();\n    });\n\n    test('should work', async () => {\n      const { service: delay } = await initDelayService({\n        log,\n      });\n\n      log.mockReset();\n\n      const delayPromise = delay.create(1000);\n\n      expect(setTimeoutStub.mock.calls.length).toEqual(1);\n      expect(setTimeoutStub.mock.calls[0][1]).toEqual(1000);\n      expect(log.mock.calls).toMatchInlineSnapshot(`\n        Array [\n          Array [\n            \"debug\",\n            \"⏳ - Created a delay:\",\n            1000,\n          ],\n        ]\n      `);\n      // Run set callback\n      setTimeoutStub.mock.calls[0][0]();\n\n      await delayPromise;\n    });\n  });\n\n  describe('delay.clear', () => {\n    let setTimeoutStub;\n    let clearTimeoutStub;\n\n    beforeEach(() => {\n      setTimeoutStub = jest.spyOn(global, 'setTimeout');\n      clearTimeoutStub = jest.spyOn(global, 'clearTimeout');\n    });\n\n    afterEach(() => {\n      setTimeoutStub.mockClear();\n      clearTimeoutStub.mockClear();\n    });\n\n    test('should fail with bad promise', async () => {\n      const { service: delay } = await initDelayService({\n        log,\n      });\n\n      log.mockReset();\n\n      await delay.clear(Promise.resolve()).catch((err) => {\n        expect(err.code).toEqual('E_BAD_DELAY');\n      });\n    });\n\n    test('should work', async () => {\n      const { service: delay } = await initDelayService({\n        log,\n      });\n      const delayPromise = delay.create(10000);\n\n      await Promise.resolve();\n\n      log.mockReset();\n\n      await Promise.all([\n        delay.clear(delayPromise),\n        delayPromise.catch((err) => {\n          expect(err.code).toEqual('E_DELAY_CLEARED');\n        }),\n      ]);\n      expect(log.mock.calls).toMatchInlineSnapshot(`\n        Array [\n          Array [\n            \"debug\",\n            \"⏳ - Cleared a delay\",\n          ],\n        ]\n      `);\n    });\n  });\n\n  test('should work with Knifecycle', async () => {\n    const { delay } = await new Knifecycle()\n      .register(initDelayService)\n      .register(constant('log', log))\n      .run(['delay']);\n\n    expect(delay);\n    expect(log.mock.calls).toMatchInlineSnapshot(`\n      Array [\n        Array [\n          \"debug\",\n          \"⌛ - Delay service initialized.\",\n        ],\n      ]\n    `);\n  });\n});\n"],"file":"delay.test.js"}