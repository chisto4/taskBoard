{"version":3,"sources":["../src/log.mock.ts"],"names":["sinon","initLogService","reuseSpecialProps","initLogMock","stub"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,OAA3B;AACA,SAASC,iBAAT,QAAkC,YAAlC;AAsDA,eAAeA,iBAAiB,CAC9BD,cAD8B,EAE9BE,WAF8B,CAAhC;;AA8BA,eAAeA,WAAf,GAA6B;AAC3B,SAAOH,KAAK,CAACI,IAAN,EAAP;AACD","sourcesContent":["import sinon from 'sinon';\nimport initLogService from './log';\nimport { reuseSpecialProps } from 'knifecycle';\n\n/* Architecture Note #1.1.1: Mocking logs\n\nThe log mock uses the\n [`sinon`](https://github.com/sinonjs/sinon/)\n module under the hood. I inject it in my tests\n and make assertions on its given args.\n\nFor example:\n```js1\nimport initLogMock from 'common-services/dist/log.mock';\nimport myTestedFunction from 'mylib';\n\ndescribe('my test', () => {\n  let log;\n\n  beforeAll((done) => {\n    initLogMock()\n    .then((_log_) => {\n      log = _log_;\n    })\n    .then(done)\n    .catch(done);\n  });\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should not log when no arg', () => {\n    myTestedFunction();\n\n    // Here I could use `callCount` or other `sinon`\n    // helpers but the fact to always use\n    // `assert.deepEqual` and the `sinon` args property\n    // give immediate input on what was wrong:\n    // if it had been called, we would see how many\n    // times and with which args in the tests output.\n    assert.deepEqual(logs.args, [], 'No log');\n  });\n\n  test('should log its args', () => {\n    myTestedFunction('wadup', 'kikoo', 'lol');\n\n    assert.deepEqual(logs.args, [[\n      'info', 'wadup', 'kikoo', 'lol',\n    ]], 'Logger output args');\n  });\n\n});\n```\n*/\n\nexport default reuseSpecialProps(\n  initLogService,\n  initLogMock as typeof initLogService,\n);\n\n/**\n * Instantiate the logging mock\n * @name initLogMock\n * @function\n * @return {Promise<Function>}  A promise of the mocked\n *  logging function\n * @example\n * import initLogMock from 'common-services/dist/log.mock';\n * import assert from 'assert';\n *\n * const log = await initLogMock();\n *\n * log('info', 'Hello!');\n * log('error', 'Aouch!');\n *\n * assert.deepEqual(log.args, [[\n *   'info', 'Hello!'\n * ], [\n *   'error', 'Aouch!'\n * ]]);\n *\n * log.reset();\n *\n * assert.deepEqual(log.args, []);\n */\nasync function initLogMock() {\n  return sinon.stub();\n}\n"],"file":"log.mock.mjs"}