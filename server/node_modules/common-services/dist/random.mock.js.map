{"version":3,"sources":["../src/random.mock.ts"],"names":["initRandomService","initRandomMock","sinon","stub"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;eAEe,mCACbA,eADa,EAEbC,cAFa,C;AAKf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,eAAeA,cAAf,GAAgC;AAC9B,SAAOC,eAAMC,IAAN,EAAP;AACD","sourcesContent":["import sinon from 'sinon';\nimport initRandomService from './random';\nimport { reuseSpecialProps } from 'knifecycle';\n\n/* Architecture Note #1.3.1: Mocking randomness\n\nThe random mock uses the [`sinon`](https://github.com/sinonjs/sinon/)\n module under the hood like for the logging mock.\n*/\n\nexport default reuseSpecialProps(\n  initRandomService,\n  initRandomMock as typeof initRandomService,\n);\n\n/**\n * Instantiate the random service mock\n * @name initRandomMock\n * @function\n * @return {Promise<Function>}  A promise of the mocked\n *  random function\n * @example\n * import initRandomMock from 'common-services/dist/random.mock';\n * import assert from 'assert';\n *\n * const random = await initRandomMock();\n *\n * random.returns(0.5); // A good limit value to test ;)\n *\n * assert.equal(random(), 0.5);\n * assert.deepEqual(random.args, [[]], 'Called once');\n *\n * random.reset();\n *\n * assert.deepEqual(random.args, []);\n */\nasync function initRandomMock() {\n  return sinon.stub();\n}\n"],"file":"random.mock.js"}