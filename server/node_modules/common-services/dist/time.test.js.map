{"version":3,"sources":["../src/time.test.ts"],"names":["describe","log","jest","fn","beforeEach","mockReset","test","done","then","time","expect","mock","calls","toMatchInlineSnapshot","catch","mockClear","now","toEqual","Knifecycle","register","initTimeService","run","toBeDefined"],"mappings":";;AAAA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,QAAMC,GAAG,GAAGC,IAAI,CAACC,EAAL,EAAZ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,GAAG,CAACI,SAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5B,uBAAgB;AACdN,MAAAA;AADc,KAAhB,EAGGO,IAHH,CAGSC,IAAD,IAAU;AACdC,MAAAA,MAAM,CAAC,eAAe,OAAOD,IAAvB,CAAN;AACAC,MAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAPQ;AAQD,KAbH,EAcGL,IAdH,CAcQ,MAAMD,IAAI,EAdlB,EAeGO,KAfH,CAeSP,IAfT;AAgBD,GAjBG,CAAJ;AAmBAP,EAAAA,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrBM,IAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5B,yBAAgB;AACdN,QAAAA;AADc,OAAhB,EAGGO,IAHH,CAGSC,IAAD,IAAU;AACdR,QAAAA,GAAG,CAACc,SAAJ;AAEA,cAAMC,GAAG,GAAGP,IAAI,EAAhB;AAEAC,QAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBK,OAAvB,CAA+B,CAC7B,CAAC,OAAD,EAAU,yBAAV,EAAqCD,GAArC,CAD6B,CAA/B;AAGD,OAXH,EAYGR,IAZH,CAYQ,MAAMD,IAAI,EAZlB,EAaGO,KAbH,CAaSP,IAbT;AAcD,KAfG,CAAJ;AAgBD,GAjBO,CAAR;AAmBAD,EAAAA,IAAI,CAAC,6BAAD,EAAiCC,IAAD,IAAU;AAC5C,QAAIW,mBAAJ,GACGC,QADH,CACYC,aADZ,EAEGD,QAFH,CAEY,0BAAS,KAAT,EAAgBlB,GAAhB,CAFZ,EAGGoB,GAHH,CAGO,CAAC,MAAD,CAHP,EAIGb,IAJH,CAIQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBC,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaa,WAAb;AACAZ,MAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAPQ;AAQD,KAdH,EAeGL,IAfH,CAeQ,MAAMD,IAAI,EAflB,EAgBGO,KAhBH,CAgBSP,IAhBT;AAiBD,GAlBG,CAAJ;AAmBD,CAhEO,CAAR","sourcesContent":["import Knifecycle, { constant } from 'knifecycle';\nimport initTimeService from './time';\n\ndescribe('initTimeService', () => {\n  const log = jest.fn();\n\n  beforeEach(() => {\n    log.mockReset();\n  });\n\n  test('should work', (done) => {\n    initTimeService({\n      log,\n    })\n      .then((time) => {\n        expect('function' === typeof time);\n        expect(log.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"debug\",\n              \"⏰ - Time service initialized.\",\n            ],\n          ]\n        `);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('time', () => {\n    test('should work', (done) => {\n      initTimeService({\n        log,\n      })\n        .then((time) => {\n          log.mockClear();\n\n          const now = time();\n\n          expect(log.mock.calls).toEqual([\n            ['debug', '⏰ - Picked a timestamp:', now],\n          ]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initTimeService)\n      .register(constant('log', log))\n      .run(['time'])\n      .then(({ time }) => {\n        expect(time).toBeDefined();\n        expect(log.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"debug\",\n              \"⏰ - Time service initialized.\",\n            ],\n          ]\n        `);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"time.test.js"}