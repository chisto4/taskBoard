{"version":3,"sources":["../src/lock.test.ts"],"names":["describe","log","jest","fn","delay","create","clear","beforeEach","mockReset","test","testDelay","lock","expect","toEqual","mock","calls","toMatchInlineSnapshot","mockClear","take","release","lockOrder","releaseOrder","Promise","all","then","push","service","logCalls","YError","err","code","params","done","Knifecycle","register","initLockService","run","toBeTruthy","catch"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,QAAMC,GAAG,GAAGC,IAAI,CAACC,EAAL,EAAZ;AACA,QAAMC,KAAK,GAAG;AACZC,IAAAA,MAAM,EAAEH,IAAI,CAACC,EAAL,EADI;AAEZG,IAAAA,KAAK,EAAEJ,IAAI,CAACC,EAAL;AAFK,GAAd;AAKAI,EAAAA,UAAU,CAAC,MAAM;AACfN,IAAAA,GAAG,CAACO,SAAJ;AACAJ,IAAAA,KAAK,CAACC,MAAN,CAAaG,SAAb;AACAJ,IAAAA,KAAK,CAACE,KAAN,CAAYE,SAAZ;AACD,GAJS,CAAV;AAMAC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,UAAMC,SAAS,GAAG,MAAM,oBAAiB,EAAjB,CAAxB;AACA,UAAMC,IAAI,GAAG,MAAM,mBAAgB;AACjCV,MAAAA,GADiC;AAEjCG,MAAAA;AAFiC,KAAhB,CAAnB;AAKAQ,IAAAA,MAAM,CAAC,OAAOD,IAAR,CAAN,CAAoBE,OAApB,CAA4B,QAA5B;AACAD,IAAAA,MAAM,CAACX,GAAG,CAACa,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAPI;AAQAf,IAAAA,GAAG,CAACgB,SAAJ;AAEA,UAAMN,IAAI,CAACO,IAAL,CAAU,KAAV,CAAN;AACA,UAAMP,IAAI,CAACO,IAAL,CAAU,MAAV,CAAN;AACAP,IAAAA,IAAI,CAACQ,OAAL,CAAa,KAAb;AACAR,IAAAA,IAAI,CAACQ,OAAL,CAAa,MAAb;AAEAP,IAAAA,MAAM,CAACX,GAAG,CAACa,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnBI;AAoBAf,IAAAA,GAAG,CAACgB,SAAJ;AAEA,UAAMG,SAAS,GAAG,EAAlB;AACA,UAAMC,YAAY,GAAG,EAArB;AAEA,UAAMC,OAAO,CAACC,GAAR,CAAY,CAChBZ,IAAI,CACDO,IADH,CACQ,KADR,EAEGM,IAFH,CAEQ,OAAOJ,SAAS,CAACK,IAAV,CAAe,CAAf,GAAmBf,SAAS,CAACgB,OAAV,CAAkBrB,MAAlB,CAAyB,EAAzB,CAA1B,CAFR,EAGGmB,IAHH,CAGQ,MAAMb,IAAI,CAACQ,OAAL,CAAa,KAAb,CAHd,EAIGK,IAJH,CAIQ,MAAMH,YAAY,CAACI,IAAb,CAAkB,CAAlB,CAJd,CADgB,EAMhBd,IAAI,CACDO,IADH,CACQ,KADR,EAEGM,IAFH,CAEQ,OAAOJ,SAAS,CAACK,IAAV,CAAe,CAAf,GAAmBf,SAAS,CAACgB,OAAV,CAAkBrB,MAAlB,CAAyB,EAAzB,CAA1B,CAFR,EAGGmB,IAHH,CAGQ,MAAMb,IAAI,CAACQ,OAAL,CAAa,KAAb,CAHd,EAIGK,IAJH,CAIQ,MAAMH,YAAY,CAACI,IAAb,CAAkB,CAAlB,CAJd,CANgB,EAWhBd,IAAI,CACDO,IADH,CACQ,KADR,EAEGM,IAFH,CAEQ,OAAOJ,SAAS,CAACK,IAAV,CAAe,CAAf,GAAmBf,SAAS,CAACgB,OAAV,CAAkBrB,MAAlB,CAAyB,EAAzB,CAA1B,CAFR,EAGGmB,IAHH,CAGQ,MAAMb,IAAI,CAACQ,OAAL,CAAa,KAAb,CAHd,EAIGK,IAJH,CAIQ,MAAMH,YAAY,CAACI,IAAb,CAAkB,CAAlB,CAJd,CAXgB,EAgBhBd,IAAI,CACDO,IADH,CACQ,KADR,EAEGM,IAFH,CAEQ,OAAOJ,SAAS,CAACK,IAAV,CAAe,CAAf,GAAmBf,SAAS,CAACgB,OAAV,CAAkBrB,MAAlB,CAAyB,EAAzB,CAA1B,CAFR,EAGGmB,IAHH,CAGQ,MAAMb,IAAI,CAACQ,OAAL,CAAa,KAAb,CAHd,EAIGK,IAJH,CAIQ,MAAMH,YAAY,CAACI,IAAb,CAAkB,CAAlB,CAJd,CAhBgB,CAAZ,CAAN;AAuBAb,IAAAA,MAAM,CAAC;AACLS,MAAAA,YADK;AAELD,MAAAA,SAFK;AAGLO,MAAAA,QAAQ,EAAE1B,GAAG,CAACa,IAAJ,CAASC;AAHd,KAAD,CAAN,CAIGC,qBAJH,CAI0B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArDI;AAsDD,GA7HG,CAAJ;AA+HAP,EAAAA,IAAI,CAAC,0BAAD,EAA6B,YAAY;AAC3C,UAAME,IAAI,GAAG,MAAM,mBAAgB;AACjCV,MAAAA,GADiC;AAEjCG,MAAAA;AAFiC,KAAhB,CAAnB;;AAKA,QAAI;AACF,YAAMO,IAAI,CAACQ,OAAL,CAAa,KAAb,CAAN;AACA,YAAM,IAAIS,eAAJ,CAAW,sBAAX,CAAN;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZjB,MAAAA,MAAM,CAAC;AACLkB,QAAAA,IAAI,EAAED,GAAG,CAACC,IADL;AAELC,QAAAA,MAAM,EAAEF,GAAG,CAACE;AAFP,OAAD,CAAN,CAGGf,qBAHH,CAG0B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,OAVM;AAWAJ,MAAAA,MAAM,CAACX,GAAG,CAACa,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,OAPM;AAQD;AACF,GA9BG,CAAJ;AAgCAP,EAAAA,IAAI,CAAC,6BAAD,EAAiCuB,IAAD,IAAU;AAC5C,QAAIC,mBAAJ,GACGC,QADH,CACYC,aADZ,EAEGD,QAFH,CAEY,0BAAS,KAAT,EAAgBjC,GAAhB,CAFZ,EAGGiC,QAHH,CAGY,0BAAS,OAAT,EAAkB9B,KAAlB,CAHZ,EAIGgC,GAJH,CAIO,CAAC,MAAD,CAJP,EAKGZ,IALH,CAKQ,CAAC;AAAEb,MAAAA;AAAF,KAAD,KAAc;AAClBC,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAa0B,UAAb;AACAzB,MAAAA,MAAM,CAACX,GAAG,CAACa,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAPQ;AAQD,KAfH,EAgBGQ,IAhBH,CAgBQ,MAAMQ,IAAI,EAhBlB,EAiBGM,KAjBH,CAiBSN,IAjBT;AAkBD,GAnBG,CAAJ;AAoBD,CAhMO,CAAR","sourcesContent":["import Knifecycle, { constant } from 'knifecycle';\nimport initLockService from './lock';\nimport initDelayService from './delay';\nimport YError from 'yerror';\n\ndescribe('initLockService', () => {\n  const log = jest.fn();\n  const delay = {\n    create: jest.fn(),\n    clear: jest.fn(),\n  };\n\n  beforeEach(() => {\n    log.mockReset();\n    delay.create.mockReset();\n    delay.clear.mockReset();\n  });\n\n  test('should work', async () => {\n    const testDelay = await initDelayService({});\n    const lock = await initLockService({\n      log,\n      delay,\n    });\n\n    expect(typeof lock).toEqual('object');\n    expect(log.mock.calls).toMatchInlineSnapshot(`\n      Array [\n        Array [\n          \"debug\",\n          \"🔒 - Lock service initialized.\",\n        ],\n      ]\n    `);\n    log.mockClear();\n\n    await lock.take('key');\n    await lock.take('key2');\n    lock.release('key');\n    lock.release('key2');\n\n    expect(log.mock.calls).toMatchInlineSnapshot(`\n      Array [\n        Array [\n          \"debug\",\n          \"🔐 - Taking the lock on \\\\\"key\\\\\" (queue length was 0)\",\n        ],\n        Array [\n          \"debug\",\n          \"🔐 - Taking the lock on \\\\\"key2\\\\\" (queue length was 0)\",\n        ],\n        Array [\n          \"debug\",\n          \"🔓 - Releasing the lock on \\\\\"key\\\\\" (queue length was 1)\",\n        ],\n        Array [\n          \"debug\",\n          \"🔓 - Releasing the lock on \\\\\"key2\\\\\" (queue length was 1)\",\n        ],\n      ]\n    `);\n    log.mockClear();\n\n    const lockOrder = [];\n    const releaseOrder = [];\n\n    await Promise.all([\n      lock\n        .take('key')\n        .then(() => (lockOrder.push(1), testDelay.service.create(10)))\n        .then(() => lock.release('key'))\n        .then(() => releaseOrder.push(1)),\n      lock\n        .take('key')\n        .then(() => (lockOrder.push(2), testDelay.service.create(10)))\n        .then(() => lock.release('key'))\n        .then(() => releaseOrder.push(2)),\n      lock\n        .take('key')\n        .then(() => (lockOrder.push(3), testDelay.service.create(10)))\n        .then(() => lock.release('key'))\n        .then(() => releaseOrder.push(3)),\n      lock\n        .take('key')\n        .then(() => (lockOrder.push(4), testDelay.service.create(10)))\n        .then(() => lock.release('key'))\n        .then(() => releaseOrder.push(4)),\n    ]);\n\n    expect({\n      releaseOrder,\n      lockOrder,\n      logCalls: log.mock.calls,\n    }).toMatchInlineSnapshot(`\n      Object {\n        \"lockOrder\": Array [\n          1,\n          2,\n          3,\n          4,\n        ],\n        \"logCalls\": Array [\n          Array [\n            \"debug\",\n            \"🔐 - Taking the lock on \\\\\"key\\\\\" (queue length was 0)\",\n          ],\n          Array [\n            \"debug\",\n            \"🔐 - Taking the lock on \\\\\"key\\\\\" (queue length was 1)\",\n          ],\n          Array [\n            \"debug\",\n            \"🔐 - Taking the lock on \\\\\"key\\\\\" (queue length was 2)\",\n          ],\n          Array [\n            \"debug\",\n            \"🔐 - Taking the lock on \\\\\"key\\\\\" (queue length was 3)\",\n          ],\n          Array [\n            \"debug\",\n            \"🔓 - Releasing the lock on \\\\\"key\\\\\" (queue length was 4)\",\n          ],\n          Array [\n            \"debug\",\n            \"🔓 - Releasing the lock on \\\\\"key\\\\\" (queue length was 3)\",\n          ],\n          Array [\n            \"debug\",\n            \"🔓 - Releasing the lock on \\\\\"key\\\\\" (queue length was 2)\",\n          ],\n          Array [\n            \"debug\",\n            \"🔓 - Releasing the lock on \\\\\"key\\\\\" (queue length was 1)\",\n          ],\n        ],\n        \"releaseOrder\": Array [\n          1,\n          2,\n          3,\n          4,\n        ],\n      }\n    `);\n  });\n\n  test('should fail when no lock', async () => {\n    const lock = await initLockService({\n      log,\n      delay,\n    });\n\n    try {\n      await lock.release('key');\n      throw new YError('E_UNEXPECTED_SUCCESS');\n    } catch (err) {\n      expect({\n        code: err.code,\n        params: err.params,\n      }).toMatchInlineSnapshot(`\n        Object {\n          \"code\": \"E_NO_LOCK\",\n          \"params\": Array [\n            \"key\",\n          ],\n        }\n      `);\n      expect(log.mock.calls).toMatchInlineSnapshot(`\n        Array [\n          Array [\n            \"debug\",\n            \"🔒 - Lock service initialized.\",\n          ],\n        ]\n      `);\n    }\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initLockService)\n      .register(constant('log', log))\n      .register(constant('delay', delay))\n      .run(['lock'])\n      .then(({ lock }) => {\n        expect(lock).toBeTruthy();\n        expect(log.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"debug\",\n              \"🔒 - Lock service initialized.\",\n            ],\n          ]\n        `);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"lock.test.js"}