import YError from 'yerror';
import { provider as _provider, singleton } from 'knifecycle';

function noop() {
  return undefined;
}

export default singleton(_provider(initDelay, "delay", ["?log"]));

async function initDelay({
  log = noop
}) {
  const pendingPromises = new Map();
  log('debug', '⌛ - Delay service initialized.');
  return {
    service: {
      create,
      clear
    },
    dispose
  };

  function create(delay) {
    let timeoutId;

    let _reject;

    const promise = new Promise((resolve, reject) => {
      _reject = reject;
      timeoutId = setTimeout(() => {
        resolve();
        pendingPromises.delete(promise);
      }, delay);
    });
    pendingPromises.set(promise, {
      timeoutId,
      reject: _reject
    });
    log('debug', '⏳ - Created a delay:', delay);
    return promise;
  }

  async function clear(promise) {
    if (!pendingPromises.has(promise)) {
      return Promise.reject(new YError('E_BAD_DELAY'));
    }

    const {
      timeoutId,
      reject
    } = pendingPromises.get(promise);
    clearTimeout(timeoutId);
    reject(new YError('E_DELAY_CLEARED'));
    pendingPromises.delete(promise);
    log('debug', '⏳ - Cleared a delay');
  }

  async function dispose() {
    await new Promise(resolve => {
      log('debug', '⏳ - Cancelling pending timeouts:', pendingPromises.size);
      resolve(Promise.all([...pendingPromises.keys()].map(clear)));
    });
  }
}
//# sourceMappingURL=delay.mjs.map