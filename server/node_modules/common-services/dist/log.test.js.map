{"version":3,"sources":["../src/log.test.ts"],"names":["describe","debug","jest","fn","logger","error","info","beforeEach","mockReset","test","done","then","expect","mock","calls","toMatchInlineSnapshot","catch","log","mockClear","Knifecycle","register","initLogService","run"],"mappings":"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","sourcesContent":["import Knifecycle, { constant } from 'knifecycle';\nimport initLogService from './log';\n\ndescribe('initLogService', () => {\n  const debug = jest.fn();\n  const logger = {\n    error: jest.fn(),\n    info: jest.fn(),\n  };\n\n  beforeEach(() => {\n    debug.mockReset();\n    logger.info.mockReset();\n    logger.error.mockReset();\n  });\n\n  test('should work', (done) => {\n    initLogService({\n      debug,\n      logger,\n    })\n      .then((fn) => {\n        expect('function' === typeof fn);\n        expect(debug.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"ðŸ‘£ - Logging service initialized.\",\n            ],\n          ]\n        `);\n        expect(logger.info.mock.calls).toMatchInlineSnapshot(`Array []`);\n        expect(logger.error.mock.calls).toMatchInlineSnapshot(`Array []`);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('log', () => {\n    test('should work', (done) => {\n      initLogService({\n        debug,\n        logger,\n      })\n        .then((log) => {\n          debug.mockClear();\n          log('debug', 'debug test');\n          log('stack', 'stack test');\n          log('info', 'info test');\n          log('error', 'error test');\n          expect(debug.mock.calls).toMatchInlineSnapshot(`\n            Array [\n              Array [\n                \"debug test\",\n              ],\n            ]\n          `);\n          expect(logger.info.mock.calls).toMatchInlineSnapshot(`\n            Array [\n              Array [\n                \"info test\",\n              ],\n            ]\n          `);\n          expect(logger.error.mock.calls).toMatchInlineSnapshot(`\n            Array [\n              Array [\n                \"stack test\",\n              ],\n              Array [\n                \"error test\",\n              ],\n            ]\n          `);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initLogService)\n      .register(constant('debug', debug))\n      .register(constant('logger', logger))\n      .run(['log'])\n      .then(({ log }) => {\n        debug.mockClear();\n        log('debug', 'debug test');\n        log('info', 'info test');\n        expect(debug.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"debug test\",\n            ],\n          ]\n        `);\n        expect(logger.info.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"info test\",\n            ],\n          ]\n        `);\n        expect(logger.error.mock.calls).toMatchInlineSnapshot(`Array []`);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"log.test.js"}