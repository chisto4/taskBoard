{"version":3,"sources":["../src/counter.test.ts"],"names":["Knifecycle","constant","initCounterService","describe","log","jest","fn","beforeEach","mockReset","test","counter","expect","mock","calls","toMatchInlineSnapshot","num","toEqual","register","run","toBeDefined"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,QAArB,QAAqC,YAArC;AACA,OAAOC,kBAAP,MAA+B,WAA/B;AAEAC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnC,QAAMC,GAAG,GAAGC,IAAI,CAACC,EAAL,EAAZ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,GAAG,CAACI,SAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,UAAMC,OAAO,GAAG,MAAMR,kBAAkB,CAAC;AACvCE,MAAAA;AADuC,KAAD,CAAxC;AAIAO,IAAAA,MAAM,CAAC,eAAe,OAAOD,OAAvB,CAAN;AACAC,IAAAA,MAAM,CAACP,GAAG,CAACQ,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAPI;AAQD,GAdG,CAAJ;AAgBAX,EAAAA,QAAQ,CAAC,SAAD,EAAY,MAAM;AACxBM,IAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,YAAMC,OAAO,GAAG,MAAMR,kBAAkB,CAAC;AACvCE,QAAAA;AADuC,OAAD,CAAxC;AAIAA,MAAAA,GAAG,CAACI,SAAJ;AAEA,YAAMO,GAAG,GAAG,MAAML,OAAO,EAAzB;AAEAC,MAAAA,MAAM,CAACP,GAAG,CAACQ,IAAJ,CAASC,KAAV,CAAN,CAAuBG,OAAvB,CAA+B,CAAC,CAAC,OAAD,EAAU,sBAAV,EAAkCD,GAAlC,CAAD,CAA/B;AACD,KAVG,CAAJ;AAWD,GAZO,CAAR;AAcAN,EAAAA,IAAI,CAAC,6BAAD,EAAgC,YAAY;AAC9C,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,IAAIV,UAAJ,GACvBiB,QADuB,CACdf,kBADc,EAEvBe,QAFuB,CAEdhB,QAAQ,CAAC,KAAD,EAAQG,GAAR,CAFM,EAGvBc,GAHuB,CAGnB,CAAC,SAAD,CAHmB,CAA1B;AAKAP,IAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBS,WAAhB;AACAR,IAAAA,MAAM,CAACP,GAAG,CAACQ,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAPI;AAQD,GAfG,CAAJ;AAgBD,CArDO,CAAR","sourcesContent":["import Knifecycle, { constant } from 'knifecycle';\nimport initCounterService from './counter';\n\ndescribe('initCounterService', () => {\n  const log = jest.fn();\n\n  beforeEach(() => {\n    log.mockReset();\n  });\n\n  test('should work', async () => {\n    const counter = await initCounterService({\n      log,\n    });\n\n    expect('function' === typeof counter);\n    expect(log.mock.calls).toMatchInlineSnapshot(`\n      Array [\n        Array [\n          \"debug\",\n          \"ðŸ“‡ - Counter service initialized.\",\n        ],\n      ]\n    `);\n  });\n\n  describe('counter', () => {\n    test('should work', async () => {\n      const counter = await initCounterService({\n        log,\n      });\n\n      log.mockReset();\n\n      const num = await counter();\n\n      expect(log.mock.calls).toEqual([['debug', 'ðŸ“‡ - Picked a count:', num]]);\n    });\n  });\n\n  test('should work with Knifecycle', async () => {\n    const { counter } = await new Knifecycle()\n      .register(initCounterService)\n      .register(constant('log', log))\n      .run(['counter']);\n\n    expect(counter).toBeDefined();\n    expect(log.mock.calls).toMatchInlineSnapshot(`\n      Array [\n        Array [\n          \"debug\",\n          \"ðŸ“‡ - Counter service initialized.\",\n        ],\n      ]\n    `);\n  });\n});\n"],"file":"counter.test.mjs"}