{"version":3,"sources":["../src/random.test.ts"],"names":["describe","log","jest","fn","beforeEach","mockReset","test","done","then","random","expect","mock","calls","toMatchInlineSnapshot","catch","mockClear","num","toEqual","Knifecycle","register","initRandomService","run","toBeDefined"],"mappings":";;AAAA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClC,QAAMC,GAAG,GAAGC,IAAI,CAACC,EAAL,EAAZ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,GAAG,CAACI,SAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5B,yBAAkB;AAChBN,MAAAA;AADgB,KAAlB,EAGGO,IAHH,CAGSC,MAAD,IAAY;AAChBC,MAAAA,MAAM,CAAC,eAAe,OAAOD,MAAvB,CAAN;AACAC,MAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAPQ;AAQD,KAbH,EAcGL,IAdH,CAcQ,MAAMD,IAAI,EAdlB,EAeGO,KAfH,CAeSP,IAfT;AAgBD,GAjBG,CAAJ;AAmBAP,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBM,IAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5B,2BAAkB;AAChBN,QAAAA;AADgB,OAAlB,EAGGO,IAHH,CAGSC,MAAD,IAAY;AAChBR,QAAAA,GAAG,CAACc,SAAJ;AACA,cAAMC,GAAG,GAAGP,MAAM,EAAlB;AAEAC,QAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBK,OAAvB,CAA+B,CAC7B,CAAC,OAAD,EAAU,+BAAV,EAA2CD,GAA3C,CAD6B,CAA/B;AAGD,OAVH,EAWGR,IAXH,CAWQ,MAAMD,IAAI,EAXlB,EAYGO,KAZH,CAYSP,IAZT;AAaD,KAdG,CAAJ;AAeD,GAhBO,CAAR;AAkBAD,EAAAA,IAAI,CAAC,6BAAD,EAAiCC,IAAD,IAAU;AAC5C,QAAIW,mBAAJ,GACGC,QADH,CACYC,eADZ,EAEGD,QAFH,CAEY,0BAAS,KAAT,EAAgBlB,GAAhB,CAFZ,EAGGoB,GAHH,CAGO,CAAC,QAAD,CAHP,EAIGb,IAJH,CAIQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgB;AACpBC,MAAAA,MAAM,CAACD,MAAD,CAAN,CAAea,WAAf;AACAZ,MAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBC,qBAAvB,CAA8C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAPQ;AAQD,KAdH,EAeGL,IAfH,CAeQ,MAAMD,IAAI,EAflB,EAgBGO,KAhBH,CAgBSP,IAhBT;AAiBD,GAlBG,CAAJ;AAmBD,CA/DO,CAAR","sourcesContent":["import Knifecycle, { constant } from 'knifecycle';\nimport initRandomService from './random';\n\ndescribe('initRandomService', () => {\n  const log = jest.fn();\n\n  beforeEach(() => {\n    log.mockReset();\n  });\n\n  test('should work', (done) => {\n    initRandomService({\n      log,\n    })\n      .then((random) => {\n        expect('function' === typeof random);\n        expect(log.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"debug\",\n              \"ðŸŽ² - Random service initialized.\",\n            ],\n          ]\n        `);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('random', () => {\n    test('should work', (done) => {\n      initRandomService({\n        log,\n      })\n        .then((random) => {\n          log.mockClear();\n          const num = random();\n\n          expect(log.mock.calls).toEqual([\n            ['debug', 'ðŸŽ² - Created a random number:', num],\n          ]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initRandomService)\n      .register(constant('log', log))\n      .run(['random'])\n      .then(({ random }) => {\n        expect(random).toBeDefined();\n        expect(log.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"debug\",\n              \"ðŸŽ² - Random service initialized.\",\n            ],\n          ]\n        `);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"random.test.js"}