"use strict";

var _knifecycle = _interopRequireWildcard(require("knifecycle"));

var _log = _interopRequireDefault(require("./log"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('initLogService', () => {
  const debug = jest.fn();
  const logger = {
    error: jest.fn(),
    info: jest.fn()
  };
  beforeEach(() => {
    debug.mockReset();
    logger.info.mockReset();
    logger.error.mockReset();
  });
  test('should work', done => {
    (0, _log.default)({
      debug,
      logger
    }).then(fn => {
      expect('function' === typeof fn);
      expect(debug.mock.calls).toMatchInlineSnapshot(`
          Array [
            Array [
              "ðŸ‘£ - Logging service initialized.",
            ],
          ]
        `);
      expect(logger.info.mock.calls).toMatchInlineSnapshot(`Array []`);
      expect(logger.error.mock.calls).toMatchInlineSnapshot(`Array []`);
    }).then(() => done()).catch(done);
  });
  describe('log', () => {
    test('should work', done => {
      (0, _log.default)({
        debug,
        logger
      }).then(log => {
        debug.mockClear();
        log('debug', 'debug test');
        log('stack', 'stack test');
        log('info', 'info test');
        log('error', 'error test');
        expect(debug.mock.calls).toMatchInlineSnapshot(`
            Array [
              Array [
                "debug test",
              ],
            ]
          `);
        expect(logger.info.mock.calls).toMatchInlineSnapshot(`
            Array [
              Array [
                "info test",
              ],
            ]
          `);
        expect(logger.error.mock.calls).toMatchInlineSnapshot(`
            Array [
              Array [
                "stack test",
              ],
              Array [
                "error test",
              ],
            ]
          `);
      }).then(() => done()).catch(done);
    });
  });
  test('should work with Knifecycle', done => {
    new _knifecycle.default().register(_log.default).register((0, _knifecycle.constant)('debug', debug)).register((0, _knifecycle.constant)('logger', logger)).run(['log']).then(({
      log
    }) => {
      debug.mockClear();
      log('debug', 'debug test');
      log('info', 'info test');
      expect(debug.mock.calls).toMatchInlineSnapshot(`
          Array [
            Array [
              "debug test",
            ],
          ]
        `);
      expect(logger.info.mock.calls).toMatchInlineSnapshot(`
          Array [
            Array [
              "info test",
            ],
          ]
        `);
      expect(logger.error.mock.calls).toMatchInlineSnapshot(`Array []`);
    }).then(() => done()).catch(done);
  });
});
//# sourceMappingURL=log.test.js.map