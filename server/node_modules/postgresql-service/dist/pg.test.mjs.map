{"version":3,"sources":["../src/pg.test.ts"],"names":["assert","Knifecycle","constant","initPGService","describe","log","jest","fn","ENV","PG","beforeEach","mockClear","test","pg","expect","mock","calls","toMatchSnapshot","$","register","run"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,YAArC;AACA,OAAOC,aAAP,MAA0B,MAA1B;AAGAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9B,QAAMC,GAAG,GAAGC,IAAI,CAACC,EAAL,EAAZ;AACA,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAMC,EAAE,GAAG,EAAX;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfL,IAAAA,GAAG,CAACM,SAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,UAAMC,EAAE,GAAG,MAAMV,aAAa,CAAC;AAC7BK,MAAAA,GAD6B;AAE7BC,MAAAA,EAF6B;AAG7BJ,MAAAA;AAH6B,KAAD,CAA9B;AAMAL,IAAAA,MAAM,CAACa,EAAD,CAAN;AACAC,IAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBC,eAAvB;AACD,GATG,CAAJ;AAWAb,EAAAA,QAAQ,CAAC,IAAD,EAAO,MAAM;AACnBQ,IAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,YAAMC,EAAE,GAAG,MAAMV,aAAa,CAAC;AAC7BK,QAAAA,GAD6B;AAE7BC,QAAAA,EAF6B;AAG7BJ,QAAAA;AAH6B,OAAD,CAA9B;AAMAL,MAAAA,MAAM,CAACa,EAAD,CAAN;AACAR,MAAAA,GAAG,CAACM,SAAJ;AAEAG,MAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBC,eAAvB;AACD,KAXG,CAAJ;AAYD,GAbO,CAAR;AAeAL,EAAAA,IAAI,CAAC,6BAAD,EAAgC,YAAY;AAC9C,UAAMM,CAAC,GAAG,IAAIjB,UAAJ,GACPkB,QADO,CACEhB,aADF,EAEPgB,QAFO,CAEEjB,QAAQ,CAAC,KAAD,EAAQG,GAAR,CAFV,EAGPc,QAHO,CAGEjB,QAAQ,CAAC,IAAD,EAAO,EAAP,CAHV,CAAV;AAIA,UAAM;AAAEW,MAAAA;AAAF,QAAS,MAAMK,CAAC,CAACE,GAAF,CAAyB,CAAC,IAAD,CAAzB,CAArB;AAEApB,IAAAA,MAAM,CAACa,EAAD,CAAN;AACAC,IAAAA,MAAM,CAACT,GAAG,CAACU,IAAJ,CAASC,KAAV,CAAN,CAAuBC,eAAvB;AACD,GATG,CAAJ;AAUD,CA7CO,CAAR","sourcesContent":["import assert from 'assert';\nimport { Knifecycle, constant } from 'knifecycle';\nimport initPGService from './pg';\nimport type { PGService } from './pg';\n\ndescribe('initPGService', () => {\n  const log = jest.fn();\n  const ENV = {};\n  const PG = {};\n\n  beforeEach(() => {\n    log.mockClear();\n  });\n\n  test('should work', async () => {\n    const pg = await initPGService({\n      ENV,\n      PG,\n      log,\n    });\n\n    assert(pg);\n    expect(log.mock.calls).toMatchSnapshot();\n  });\n\n  describe('pg', () => {\n    test('should work', async () => {\n      const pg = await initPGService({\n        ENV,\n        PG,\n        log,\n      });\n\n      assert(pg);\n      log.mockClear();\n\n      expect(log.mock.calls).toMatchSnapshot();\n    });\n  });\n\n  test('should work with Knifecycle', async () => {\n    const $ = new Knifecycle()\n      .register(initPGService)\n      .register(constant('log', log))\n      .register(constant('PG', {}));\n    const { pg } = await $.run<{ pg: PGService }>(['pg']);\n\n    assert(pg);\n    expect(log.mock.calls).toMatchSnapshot();\n  });\n});\n"],"file":"pg.test.mjs"}