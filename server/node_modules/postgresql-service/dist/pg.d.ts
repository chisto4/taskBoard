import type { PoolConfig, QueryResult } from 'pg';
import type { LogService } from 'common-services';
export declare const DEFAULT_PG_URL_ENV_NAME = "PG_URL";
declare type PG_CONFIG = PoolConfig;
declare type SQLValue = any;
export declare type PG_ENV = {
    PG_URL?: string;
    [name: string]: string;
};
export declare type PGServiceConfig = {
    PG_URL_ENV_NAME?: string;
    ENV?: PG_ENV;
    PG: PG_CONFIG;
};
export declare type PGServiceDependencies = PGServiceConfig & {
    log?: LogService;
};
export declare type PGQuery = {
    text: string;
    values: SQLValue[];
};
export interface PGService {
    query: (query: PGQuery) => Promise<QueryResult>;
    queries: (queries: PGQuery[]) => Promise<QueryResult[]>;
    transaction: (queries: PGQuery[]) => Promise<QueryResult[]>;
}
export interface PGProvider {
    service: PGService;
    errorPromise: Promise<void>;
    dispose: () => Promise<void>;
}
declare const _default: import("knifecycle").ProviderInitializer<PGServiceDependencies, PGService>;
export default _default;
