"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_PG_URL_ENV_NAME = void 0;

var _knifecycle = require("knifecycle");

var _yerror = _interopRequireDefault(require("yerror"));

var _pgConnectionString = _interopRequireDefault(require("pg-connection-string"));

var _pg = _interopRequireDefault(require("pg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Required to work as a MJS module. Will be turnable
// into real imports when those module will support MJS
const {
  Pool,
  types
} = _pg.default;
const {
  parse: parseConnectionURL
} = _pgConnectionString.default;
/* Architecture Note #1.2: Timezones

Ensure not messing with time zones with practical defaults.
See https://github.com/vitaly-t/pg-promise/issues/389

// TODO: Ensure arrays are well parsed too with `postgres-array` for
// 1115 - timestamp without time zone[]
// 1182 - date[]
*/

types.setTypeParser(1114, str => str === null ? null : new Date(str.replace(' ', 'T') + 'Z'));
types.setTypeParser(1082, str => str === null ? null : new Date(str + 'T00:00:00Z'));
const DEFAULT_ENV = {};
const DEFAULT_PG_URL_ENV_NAME = 'PG_URL';
exports.DEFAULT_PG_URL_ENV_NAME = DEFAULT_PG_URL_ENV_NAME;

/* Architecture Note #1: PostgreSQL service

This service is a simple wrapper around the `pg` node module
 that adds native support for transsactions and a few tweaks
 for a better plug and play experience.

Its goal is to expose only a subset of its capabilities to
 reduce the API surface to 3 use cases:
- run a single query
- run several queries in parallel
- run several queries into a single transaction

And that's it ;). The purpose is to know SQL, not an ORM, and
 have an easily mockable API surface.

PG module API Doc: https://node-postgres.com/features/pooling
*/
var _default = (0, _knifecycle.singleton)((0, _knifecycle.provider)((0, _knifecycle.inject)(["?PG_URL_ENV_NAME", "?ENV", "PG", "?log"], initPGService), 'pg'));
/**
 * Instantiate the pg service
 * @name initPGService
 * @function
 * @param  {Object}   services
 * The services to inject
 * @param  {Function} [services.log]
 * A logging function
 * @param  {Object}   [services.PG_URL_ENV_NAME]
 * The environment variable name in which to pick-up the
 *  PG url
 * @param  {Object}   [services.ENV]
 * An environment object
 * @param  {Object}   services.PG
 * A `pg` compatible configuration object
 * @return {Promise<Object>}
 * A promise of the pg service
 * @example
 * import initPGService from 'postgresql-service';
 *
 * const { service: pg, dispose } = await initPGService({
 *   log: console.log.bind(console),
 *   ENV: process.env, // Proxy the PG_URL env var
 * });
 *
 * const result = pg.query('SELECT 1');
 *
 * await dispose();
 */


exports.default = _default;

async function initPGService({
  PG_URL_ENV_NAME = DEFAULT_PG_URL_ENV_NAME,
  ENV = DEFAULT_ENV,
  PG,
  log = noop
}) {
  const config = _objectSpread(_objectSpread({}, PG), ENV[PG_URL_ENV_NAME] ? parseConnectionURL(ENV[PG_URL_ENV_NAME]) : {});

  const pool = new Pool(config);
  const pg = {
    query,
    queries,
    transaction
  };
  const errorPromise = new Promise((resolve, reject) => {
    pool.once('error', err => {
      const castedError = _yerror.default.wrap(err);

      log('error', 'Got a PG error:', castedError.stack);
      reject(castedError);
    });
  });
  log('debug', 'üêò - Initializing PG service...');
  return {
    service: pg,
    errorPromise,
    dispose: async () => {
      log('debug', 'üêò - Draining PG connections... üêò');
      await pool.end();
      log('debug', 'üêò - PG connections drained ! üêò');
    }
  };
  /**
   * Executes the given query
   * @return {String}   Query to execute
   * @return {Object}   Arguments hash for the query
   * @example
   * const { rows, fields } = await pg.query(
   *    'SELECT * FROM users WHERE user = $$userId',
   *    { userId: 1 }
   * );
   */

  async function query(query) {
    return (await pg.queries([query]))[0];
  }
  /**
   * Executes the given queries in parallel (using the connections pool)
   * @return {Array<String>}   Queries to execute
   * @return {Object}          Arguments hashes for the queries
   * @example
   * const [{ rows, fields }, { rows2, fields2 }] = await pg.queries([
   *    'SELECT * FROM users WHERE user = $$userId',
   *    'SELECT * FROM users WHERE user = $$userId',
   * ], { userId: 1 });
   */


  async function queries(queries) {
    const client = await pool.connect();
    let results;

    try {
      results = await Promise.all(queries.map(async (query, index) => {
        try {
          return await client.query(query);
        } catch (err) {
          throw castPGQueryError(err, query.text, query.values, index);
        }
      }));
    } catch (err) {
      const castedError = _yerror.default.cast(err, 'E_PG_QUERIES', queries.map(query => query.text), queries.map(query => query.values), err.code === 'E_PG_QUERY' ? err.params && typeof err.params[2] === 'object' ? err.params[2] : {} : {});

      throw castedError;
    } finally {
      await client.release();
    }

    return results;
  }
  /**
   * Executes the given queries in a single transaction
   * @return {Array<String>}   Queries to execute
   * @return {Object}          Arguments hashes for the queries
   * @example
   * const [, { rows, fields }] = await pg.transaction([
   *    'UPDATE users SET isActive = true WHERE user = $$userId',
   *    'SELECT * FROM users WHERE user = $$userId',
   * ], { userId: 1 });
   */


  async function transaction(queries) {
    const client = await pool.connect();
    let results;

    try {
      await client.query('BEGIN');

      try {
        results = await Promise.all(queries.map(async (query, index) => {
          try {
            return await client.query(query);
          } catch (err) {
            throw castPGQueryError(err, query.text, query.values, index);
          }
        }));
      } catch (err) {
        const castedError = _yerror.default.cast(err, 'E_PG_TRANSACTION', queries.map(query => query.text), queries.map(query => query.values), err.code === 'E_PG_QUERY' ? err.params && typeof err.params[2] === 'object' ? err.params[2] : {} : {});

        await client.query('ROLLBACK');
        throw castedError;
      }

      await client.query('COMMIT');
    } finally {
      await client.release();
    }

    return results;
  }
}
/* Architecture Note #1.1: Errors casting

This service also convert `pg` errors into `yerror` ones which taste
 better imo.
*/


function castPGQueryError(err, query, args, index) {
  return _yerror.default.wrap(err, 'E_PG_QUERY', query, args, {
    index,
    code: err.code || undefined,
    name: err.name || undefined,
    severity: err.severity || undefined,
    detail: err.detail || undefined,
    schema: err.schema || undefined,
    table: err.table || undefined,
    column: err.column || undefined,
    dataType: err.dataType || undefined,
    constraint: err.constraint || undefined,
    file: err.file || undefined,
    line: err.line || undefined,
    routine: err.routine || undefined
  });
}

function noop(...args) {
  args;
}
//# sourceMappingURL=pg.js.map