function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { singleton, provider, inject as _inject } from 'knifecycle';
import YError from 'yerror';
import pgConnectionString from 'pg-connection-string';
import pg from 'pg';
const {
  Pool,
  types
} = pg;
const {
  parse: parseConnectionURL
} = pgConnectionString;
types.setTypeParser(1114, str => str === null ? null : new Date(str.replace(' ', 'T') + 'Z'));
types.setTypeParser(1082, str => str === null ? null : new Date(str + 'T00:00:00Z'));
const DEFAULT_ENV = {};
export const DEFAULT_PG_URL_ENV_NAME = 'PG_URL';
export default singleton(provider(_inject(["?PG_URL_ENV_NAME", "?ENV", "PG", "?log"], initPGService), 'pg'));

async function initPGService({
  PG_URL_ENV_NAME = DEFAULT_PG_URL_ENV_NAME,
  ENV = DEFAULT_ENV,
  PG,
  log = noop
}) {
  const config = _objectSpread(_objectSpread({}, PG), ENV[PG_URL_ENV_NAME] ? parseConnectionURL(ENV[PG_URL_ENV_NAME]) : {});

  const pool = new Pool(config);
  const pg = {
    query,
    queries,
    transaction
  };
  const errorPromise = new Promise((resolve, reject) => {
    pool.once('error', err => {
      const castedError = YError.wrap(err);
      log('error', 'Got a PG error:', castedError.stack);
      reject(castedError);
    });
  });
  log('debug', '🐘 - Initializing PG service...');
  return {
    service: pg,
    errorPromise,
    dispose: async () => {
      log('debug', '🐘 - Draining PG connections... 🐘');
      await pool.end();
      log('debug', '🐘 - PG connections drained ! 🐘');
    }
  };

  async function query(query) {
    return (await pg.queries([query]))[0];
  }

  async function queries(queries) {
    const client = await pool.connect();
    let results;

    try {
      results = await Promise.all(queries.map(async (query, index) => {
        try {
          return await client.query(query);
        } catch (err) {
          throw castPGQueryError(err, query.text, query.values, index);
        }
      }));
    } catch (err) {
      const castedError = YError.cast(err, 'E_PG_QUERIES', queries.map(query => query.text), queries.map(query => query.values), err.code === 'E_PG_QUERY' ? err.params && typeof err.params[2] === 'object' ? err.params[2] : {} : {});
      throw castedError;
    } finally {
      await client.release();
    }

    return results;
  }

  async function transaction(queries) {
    const client = await pool.connect();
    let results;

    try {
      await client.query('BEGIN');

      try {
        results = await Promise.all(queries.map(async (query, index) => {
          try {
            return await client.query(query);
          } catch (err) {
            throw castPGQueryError(err, query.text, query.values, index);
          }
        }));
      } catch (err) {
        const castedError = YError.cast(err, 'E_PG_TRANSACTION', queries.map(query => query.text), queries.map(query => query.values), err.code === 'E_PG_QUERY' ? err.params && typeof err.params[2] === 'object' ? err.params[2] : {} : {});
        await client.query('ROLLBACK');
        throw castedError;
      }

      await client.query('COMMIT');
    } finally {
      await client.release();
    }

    return results;
  }
}

function castPGQueryError(err, query, args, index) {
  return YError.wrap(err, 'E_PG_QUERY', query, args, {
    index,
    code: err.code || undefined,
    name: err.name || undefined,
    severity: err.severity || undefined,
    detail: err.detail || undefined,
    schema: err.schema || undefined,
    table: err.table || undefined,
    column: err.column || undefined,
    dataType: err.dataType || undefined,
    constraint: err.constraint || undefined,
    file: err.file || undefined,
    line: err.line || undefined,
    routine: err.routine || undefined
  });
}

function noop(...args) {
  args;
}
//# sourceMappingURL=pg.mjs.map